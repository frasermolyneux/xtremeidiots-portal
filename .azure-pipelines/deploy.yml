trigger: none

pool:
  vmImage: 'ubuntu-latest'

variables:
  TerraformVersion: '0.14.8'
  AzTerraformRegion: 'uksouth'
  AzTerraformResourceGroup: 'xi-portal-terraform'
  AzTerraformStorageAccount: 'xiportaltfstate'
  AzSubscription: 'XI-Pay-As-You-Go'

stages: 
#- stage: build
#  jobs:
#  - job: build
#    pool:
#      vmImage: 'windows-latest'
#
#    variables:
#      solution: '**/*.sln'
#      buildPlatform: 'Any CPU'
#      buildConfiguration: 'Release'
#
#    steps:
#    - task: NuGetToolInstaller@1
#
#    - task: NuGetCommand@2
#      inputs:
#        restoreSolution: '$(solution)'
#        command: 'restore'
#        feedsToUse: 'config'
#        nugetConfigPath: './src/nuget.config'
#
#    - task: VSBuild@1
#      inputs:
#        solution: '$(solution)'
#        msbuildArgs: '/p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=true /p:PackageLocation="$(build.artifactStagingDirectory)/webapp"'
#        platform: '$(buildPlatform)'
#        configuration: '$(buildConfiguration)'
#
#    - task: CopyFiles@2
#      displayName: 'Copy terraform folder into staging directory'
#      inputs: 
#        SourceFolder: '$(Build.sourcesDirectory)/terraform'
#        Contents: '**'
#        TargetFolder: '$(Build.artifactStagingDirectory)/terraform'
#
#    - task: ArchiveFiles@2
#      displayName: "Package XI.Portal.FuncApp to artifact staging directory"
#      inputs:
#        rootFolderOrFile: '$(Build.SourcesDirectory)/src/XI.Portal.FuncApp/bin/Release/netcoreapp3.1/'
#        includeRootFolder: false
#        archiveType: 'zip'
#        archiveFile: '$(Build.ArtifactStagingDirectory)/XI.Portal.FuncApp.zip'
#        replaceExistingArchive: true
#
#    - publish: $(Build.artifactStagingDirectory)/XI.Portal.FuncApp.zip
#      displayName: Publish XI.Portal.FuncApp artifact
#      artifact: funcapp
#      
#    - publish: $(Build.artifactStagingDirectory)/terraform
#      displayName: Publish terraform artifact
#      artifact: terraform
#
#    - publish: '$(Build.artifactStagingDirectory)/webapp'
#      displayName: 'Publish website source artifact'
#      artifact: webapp

#- stage: terraform_state_backend
#  jobs:
#  - job: create_terraform_backend
#    pool:
#      vmImage: 'windows-latest'
#
#    steps:
#    - checkout: none
#      displayName: 'Skip checking out source'
#
#    - task: AzureCLI@1
#      displayName: 'Create terraform backend in Azure storage'
#      inputs:
#        azureSubscription: '$(AzSubscription)'
#        scriptLocation: inlineScript
#        inlineScript: |
#          call az group create --location "$(AzTerraformRegion)" --name "$(AzTerraformResourceGroup)"
#          call az storage account create --name "$(AzTerraformStorageAccount)" --resource-group "$(AzTerraformResourceGroup)" --location "$(AzTerraformRegion)" --sku "Standard_LRS"
#          call az storage container create --name "terraform" --account-name "$(AzTerraformStorageAccount)"

#- template: templates/deploy-application.yml
#  parameters:
#    environment: 'leo'

- stage: deploy_bicep
  jobs:
  - job: deploy_bicep
    pool:
      vmImage: 'ubuntu-latest'

    steps:
      - task: AzureCLI@2
        displayName: Az CLI Deploy Portal Core Bicep
        inputs:
          azureSubscription: $(AzSubscription)
          scriptType: 'bash'
          scriptLocation: 'inlineScript'
          inlineScript: |
            az deployment sub create \
            --template-file bicep/portalCore.bicep \
            --location "uksouth" \
            --parameters parLocation='uksouth' parEnvironment='prd'

      - task: AzureCLI@2
        inputs:
          azureSubscription: $(AzSubscription)
          scriptType: 'ps'
          scriptLocation: 'scriptPath'
          scriptPath: '$(Build.sourcesDirectory)/.azure-pipelines/scripts/createAppRegistrations.azcli'

      - task: AzureCLI@2
        inputs:
          azureSubscription: $(AzSubscription)
          scriptType: 'ps'
          scriptLocation: 'scriptPath'
          scriptPath: '$(Build.sourcesDirectory)/.azure-pipelines/scripts/appRegistrationCredentials.azcli'

      - task: AzureCLI@2
        displayName: Az CLI Deploy Events API Bicep
        inputs:
          azureSubscription: $(AzSubscription)
          scriptType: 'bash'
          scriptLocation: 'inlineScript'
          inlineScript: |
            $eventsApiName = 'portal-events-api-prd'
            $eventsApiAppId = (az ad app list --filter "displayName eq '$eventsApiName'" --query '[].appId') | ConvertFrom-Json

            az deployment group create \
            --resource-group 'rg-portal-prd-uksouth-01' \
            --template-file bicep/eventsApi.bicep  \
            --parameters parLocation='uksouth' parEnvironment='prd' parKeyVaultName='kv-portal-prd-uksouth-01' parFuncAppServicePlanName='plan-fn-portal-prd-uksouth-01' parAppInsightsName='ai-portal-prd-uksouth-01' parApiManagementName='apim-portal-prd-uksouth-01' parEventsApiAppId=$eventsApiAppId

trigger: none

pool:
  vmImage: 'ubuntu-latest'

variables:
  TerraformVersion: '0.14.8'
  AzTerraformRegion: 'uksouth'
  AzTerraformResourceGroup: 'xi-portal-terraform'
  AzTerraformStorageAccount: 'xiportaltfstate'
  AzSubscription: 'XI-Pay-As-You-Go'
  environment: 'prd'
  location: 'uksouth'
  subscription: 'XI-Pay-As-You-Go'
  resourceGroup: 'rg-portal-prd-uksouth-01'
  keyVault: 'kv-portal-prd-uksouth-01'
  appServicePlan: 'plan-portal-prd-uksouth-01'
  appInsights: 'ai-portal-prd-uksouth-01'
  apiManagement: 'apim-portal-prd-uksouth-01'
  serviceBus: 'sb-portal-prd-uksouth-01'
  eventsApiAppName: 'portal-events-api-prd'
  repositoryApiName: 'portal-repository-api-prd'
  serversApiName: 'portal-servers-api-prd'
  eventsFunctionAppName: 'fn-events-portal-prd-uksouth-01'
  ingestFunctionAppName: 'fn-ingest-portal-prd-uksouth-01'
  repositoryWebAppName: 'webapi-repository-portal-prd-uksouth-01'
  repositoryFunctionAppName: 'fn-repository-portal-prd-uksouth-01'
  serversWebAppName: 'webapi-servers-portal-prd-uksouth-01'
  syncFunctionAppName: 'fn-sync-portal-prd-uksouth-01'
  adminWebAppName: 'webapp-admin-portal-prd-uksouth-01'
  sqlServerName: 'sql-portal-prd-uksouth-01'
  sqlServerDomainName: 'sql-portal-prd-uksouth-01.database.windows.net'
  sqlAdminGroupName: 'sg-sql-portal-prd-admins'

stages: 
- stage: LegacyBuild

  pool:
    vmImage: 'windows-latest'

  jobs:
  - job: LegacyBuild

    variables:
      solution: '**/*.sln'
      buildPlatform: 'Any CPU'
      buildConfiguration: 'Release'

    steps:
    - task: NuGetToolInstaller@1

    - task: NuGetCommand@2
      inputs:
        restoreSolution: '$(solution)'
        command: 'restore'
        feedsToUse: 'config'
        nugetConfigPath: './src/nuget.config'

    - task: VSBuild@1
      inputs:
        solution: '$(solution)'
        msbuildArgs: '/p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=true /p:PackageLocation="$(build.artifactStagingDirectory)/webapp"'
        platform: '$(buildPlatform)'
        configuration: '$(buildConfiguration)'

    - task: CopyFiles@2
      displayName: 'Copy terraform folder into staging directory'
      inputs: 
        SourceFolder: '$(Build.sourcesDirectory)/terraform'
        Contents: '**'
        TargetFolder: '$(Build.artifactStagingDirectory)/terraform'

    - task: ArchiveFiles@2
      displayName: "Package XI.Portal.FuncApp to artifact staging directory"
      inputs:
        rootFolderOrFile: '$(Build.SourcesDirectory)/src/XI.Portal.FuncApp/bin/Release/net6.0/'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/XI.Portal.FuncApp.zip'
        replaceExistingArchive: true

    - publish: $(Build.artifactStagingDirectory)/XI.Portal.FuncApp.zip
      displayName: Publish XI.Portal.FuncApp artifact
      artifact: funcapp
      
    - publish: $(Build.artifactStagingDirectory)/terraform
      displayName: Publish terraform artifact
      artifact: terraform

    - publish: '$(Build.artifactStagingDirectory)/webapp'
      displayName: 'Publish website source artifact'
      artifact: webapp
  
- template: templates/deploy-application.yml
  parameters:
    environment: 'leo'

- stage: Build
  jobs:
  - template: templates/build-function-app.yml
    parameters: 
      jobName: 'BuildEventsFunctionApp'
      projectName: 'events-func'
      publishArtifact: true

  - template: templates/build-function-app.yml
    parameters: 
      dependsOn: ['BuildEventsFunctionApp']
      jobName: 'BuildIngestFunctionApp'
      projectName: 'ingest-func'
      publishArtifact: true

  - template: templates/build-web-app.yml
    parameters: 
      dependsOn: ['BuildIngestFunctionApp']
      jobName: 'BuildRepositoryWebApi'
      projectName: 'repository-webapi'
      nugetConfigPath: './src/nuget.config'
      publishArtifact: true

  - template: templates/build-function-app.yml
    parameters: 
      dependsOn: ['BuildRepositoryWebApi']
      jobName: 'BuildRepositoryFunctionApp'
      projectName: 'repository-func'
      publishArtifact: true

  - template: templates/build-function-app.yml
    parameters: 
      dependsOn: ['BuildRepositoryFunctionApp']
      jobName: 'BuildSyncFunctionApp'
      projectName: 'sync-func'
      publishArtifact: true

  - template: templates/build-web-app.yml
    parameters: 
      dependsOn: ['BuildSyncFunctionApp']
      jobName: 'BuildServersWebApi'
      projectName: 'servers-webapi'
      publishArtifact: true

  - template: templates/build-sql-database.yml
    parameters:
      dependsOn: ['BuildServersWebApi']
      publishArtifact: true

- stage: DeployPrdCore

  jobs:
  - job: DeployAppRegistrations
    steps:
      - task: AzureCLI@2
        displayName: Create Application Registrations
        inputs:
          azureSubscription: $(subscription)
          scriptType: 'pscore'
          scriptLocation: 'scriptPath'
          scriptPath: '$(Build.sourcesDirectory)/scripts/createAppRegistrations.ps1'

      - task: AzureCLI@2
        displayName: Create Application Credentials
        inputs:
          azureSubscription: $(subscription)
          scriptType: 'pscore'
          scriptLocation: 'scriptPath'
          scriptPath: '$(Build.sourcesDirectory)/scripts/appRegistrationCredentials.ps1'

  - job: DeployPortalCoreBicep
    dependsOn: [DeployAppRegistrations]
    steps:
      - task: AzureCLI@2
        displayName: DeployPortalCoreBicep
        inputs:
          azureSubscription: $(subscription)
          scriptType: 'pscore'
          scriptLocation: 'inlineScript'
          inlineScript: |
            az deployment sub create `
            --template-file bicep/portalCore.bicep `
            --location $(location) `
            --parameters parLocation=$(location) parEnvironment=$(environment)

- stage: DeployPrdInfrastructure

  jobs:
  - job: DeployDatabasePrdBicep
    steps:
    - task: AzureCLI@2
      inputs:
        azureSubscription: $(subscription)
        scriptType: 'pscore'
        scriptLocation: 'inlineScript'
        inlineScript: |
          $sqlPasswordSecretName = "sql-portal-$(environment)-$(location)-01-admin-password"
          $sqlServerAdminPassword = (az keyvault secret show --name $sqlPasswordSecretName --vault-name $(keyVault) --query 'value') | ConvertFrom-Json
          $adminGroupObjectId = (az ad group show --group $(sqlAdminGroupName) --query 'objectId')  | ConvertFrom-Json

          az deployment group create --resource-group $(resourceGroup) `
              --template-file bicep/sqlServer.bicep  `
              --parameters parLocation=$(location) `
              parEnvironment=$(environment) `
              parAdminPassword=$sqlServerAdminPassword `
              parKeyVaultName=$(keyVault) `
              parAdminGroupName=$(sqlAdminGroupName) `
              parAdminGroupOid=$adminGroupObjectId

    - task: AzureCLI@2
      displayName: CreateSqlServerRoleAssignment
      inputs:
        azureSubscription: $(subscription)
        scriptType: 'pscore'
        scriptLocation: 'scriptPath'
        arguments: '$(sqlServerName) $(resourceGroup)'
        scriptPath: '$(Build.sourcesDirectory)/scripts/CreateSqlServerRoleAssignment.ps1'

  - job: DeployRepositoryAppBicep
    dependsOn: ['DeployDatabasePrdBicep']
    steps:
    - task: AzureCLI@2
      displayName: DeployRepositoryAppBicep
      inputs:
        azureSubscription: $(subscription)
        scriptType: 'pscore'
        scriptLocation: 'inlineScript'
        inlineScript: |
          az deployment group create --resource-group $(resourceGroup) `
              --template-file bicep/repositoryApp.bicep `
              --parameters parLocation=$(location) `
              parEnvironment=$(environment) `
              parKeyVaultName=$(keyVault) `
              parAppServicePlanName=$(appServicePlan) `
              parAppInsightsName=$(appInsights) `
              parApiManagementName=$(apiManagement) `
              parServiceBusName=$(serviceBus)

  - job: DeployRepositoryApiBicep
    dependsOn: ['DeployRepositoryAppBicep']
    steps:
    - task: AzureCLI@2
      displayName: DeployRepositoryApiBicep
      inputs:
        azureSubscription: $(subscription)
        scriptType: 'pscore'
        scriptLocation: 'inlineScript'
        inlineScript: |
          $repositoryApiAppId = (az ad app list --filter "displayName eq '$(repositoryApiName)'" --query '[].appId') | ConvertFrom-Json
          
          az deployment group create --resource-group $(resourceGroup) `
              --template-file bicep/repositoryApi.bicep  `
              --parameters parLocation=$(location) `
              parEnvironment=$(environment) `
              parKeyVaultName=$(keyVault) `
              parAppServicePlanName=$(appServicePlan) `
              parAppInsightsName=$(appInsights) `
              parApiManagementName=$(apiManagement) `
              parSqlServerName=$(sqlServerName) `
              parRepositoryApiAppId=$repositoryApiAppId

  - job: DeployIngestAppBicep
    dependsOn: ['DeployRepositoryApiBicep']
    steps:
    - task: AzureCLI@2
      displayName: DeployIngestAppBicep
      inputs:
        azureSubscription: $(subscription)
        scriptType: 'pscore'
        scriptLocation: 'inlineScript'
        inlineScript: |
          az deployment group create --resource-group $(resourceGroup) `
              --template-file bicep/ingestApp.bicep `
              --parameters parLocation=$(location) `
              parEnvironment=$(environment) `
              parKeyVaultName=$(keyVault) `
              parAppServicePlanName=$(appServicePlan) `
              parAppInsightsName=$(appInsights) `
              parApiManagementName=$(apiManagement) `
              parServiceBusName=$(serviceBus)

  - job: DeployEventsAppBicep
    dependsOn: ['DeployIngestAppBicep']
    steps:
    - task: AzureCLI@2
      displayName: DeployEventsAppBicep
      inputs:
        azureSubscription: $(subscription)
        scriptType: 'pscore'
        scriptLocation: 'inlineScript'
        inlineScript: |
          $eventsApiAppId = (az ad app list --filter "displayName eq '$(eventsApiAppName)'" --query '[].appId') | ConvertFrom-Json

          az deployment group create --resource-group $(resourceGroup) `
              --template-file bicep/eventsApp.bicep  `
              --parameters parLocation=$(location) `
              parEnvironment=$(environment) `
              parKeyVaultName=$(keyVault) `
              parAppServicePlanName=$(appServicePlan) `
              parAppInsightsName=$(appInsights) `
              parApiManagementName=$(apiManagement) `
              parServiceBusName=$(serviceBus) `
              parEventsApiAppId=$eventsApiAppId

  - job: DeploySyncAppBicep
    dependsOn: ['DeployEventsAppBicep']
    steps:
    - task: AzureCLI@2
      displayName: DeploySyncAppBicep
      inputs:
        azureSubscription: $(subscription)
        scriptType: 'pscore'
        scriptLocation: 'inlineScript'
        inlineScript: |
          az deployment group create --resource-group $(resourceGroup) `
              --template-file bicep/syncApp.bicep  `
              --parameters parLocation=$(location) `
              parEnvironment=$(environment) `
              parKeyVaultName=$(keyVault) `
              parAppServicePlanName=$(appServicePlan) `
              parAppInsightsName=$(appInsights) `
              parApiManagementName=$(apiManagement) `
              parServiceBusName=$(serviceBus)

  - job: DeployAdminWebAppBicep
    dependsOn: ['DeploySyncAppBicep']
    steps:
    - task: AzureCLI@2
      displayName: DeployAdminWebAppBicep
      inputs:
        azureSubscription: $(subscription)
        scriptType: 'pscore'
        scriptLocation: 'inlineScript'
        inlineScript: |
          az deployment group create --resource-group $(resourceGroup) `
              --template-file bicep/adminWebApp.bicep  `
              --parameters parLocation=$(location) `
              parEnvironment=$(environment) `
              parKeyVaultName=$(keyVault) `
              parAppServicePlanName=$(appServicePlan) `
              parAppInsightsName=$(appInsights) `
              parApiManagementName=$(apiManagement) `
              parServiceBusName=$(serviceBus)

  - job: DeployServersApiBicep
    dependsOn: ['DeployAdminWebAppBicep']
    steps:
    - task: AzureCLI@2
      displayName: DeployServersApiBicep
      inputs:
        azureSubscription: $(subscription)
        scriptType: 'pscore'
        scriptLocation: 'inlineScript'
        inlineScript: |
          $serversApiAppId = (az ad app list --filter "displayName eq '$(serversApiName)'" --query '[].appId') | ConvertFrom-Json
          
          az deployment group create --resource-group $(resourceGroup) `
              --template-file bicep/serversApi.bicep  `
              --parameters parLocation=$(location) `
              parEnvironment=$(environment) `
              parKeyVaultName=$(keyVault) `
              parAppServicePlanName=$(appServicePlan) `
              parAppInsightsName=$(appInsights) `
              parApiManagementName=$(apiManagement) `
              parServersApiAppId=$serversApiAppId

- stage: DeployPrdPermissions

  jobs:
  - job: DeployPrdPermissions
    steps:
      - task: AzureCLI@2
        displayName: SetIngestApiFuncAppPermissions
        inputs:
          azureSubscription: $(subscription)
          scriptType: 'pscore'
          scriptLocation: 'scriptPath'
          scriptPath: '$(Build.sourcesDirectory)/scripts/SetIngestApiFuncAppPermissions.ps1'

      - task: AzureCLI@2
        displayName: SetLegacyFuncAppPermissions
        inputs:
          azureSubscription: $(subscription)
          scriptType: 'pscore'
          scriptLocation: 'scriptPath'
          scriptPath: '$(Build.sourcesDirectory)/scripts/SetLegacyFuncAppPermissions.ps1'

      - task: AzureCLI@2
        displayName: SetLegacyWebAppPermissions
        inputs:
          azureSubscription: $(subscription)
          scriptType: 'pscore'
          scriptLocation: 'scriptPath'
          scriptPath: '$(Build.sourcesDirectory)/scripts/SetLegacyWebAppPermissions.ps1'

      - task: AzureCLI@2
        displayName: SetRepositoryApiAppPermissions
        inputs:
          azureSubscription: $(subscription)
          scriptType: 'pscore'
          scriptLocation: 'scriptPath'
          scriptPath: '$(Build.sourcesDirectory)/scripts/SetRepositoryApiAppPermissions.ps1'

      - task: AzureCLI@2
        displayName: SetRepositoryAppPermissions
        inputs:
          azureSubscription: $(subscription)
          scriptType: 'pscore'
          scriptLocation: 'scriptPath'
          scriptPath: '$(Build.sourcesDirectory)/scripts/SetRepositoryAppPermissions.ps1'

      - task: AzureCLI@2
        displayName: SetServersAppPermissions
        inputs:
          azureSubscription: $(subscription)
          scriptType: 'pscore'
          scriptLocation: 'scriptPath'
          scriptPath: '$(Build.sourcesDirectory)/scripts/SetServersAppPermissions.ps1'

- stage: DeployPrdAppsAndDatabase

  jobs:
  - template: templates/deploy-sql-database.yml
    parameters:
      jobName: DeploySqlDatabase
      serverName: $(sqlServerDomainName)
      databaseName: 'portaldb'
      environmentServiceNameAzureRM: $(subscription)
      sqlCmdArgs: '/Variables:env=$(environment)'

  - template: templates/deploy-function-app.yml
    parameters:
      dependsOn: ['DeploySqlDatabase']
      projectName: events-func
      jobName: DeployEventsFunctionApp
      functionAppName: '$(eventsFunctionAppName)'
      environmentServiceNameAzureRM: $(subscription)

  - template: templates/deploy-function-app.yml
    parameters:
      dependsOn: ['DeployEventsFunctionApp']
      projectName: ingest-func
      jobName: DeployIngestFunctionApp
      functionAppName: '$(ingestFunctionAppName)'
      environmentServiceNameAzureRM: $(subscription)

  - template: templates/deploy-web-app.yml
    parameters:
      dependsOn: ['DeployIngestFunctionApp']
      projectName: repository-webapi
      jobName: DeployRepositoryWebApi
      webAppName: '$(repositoryWebAppName)'
      webAppNameResourceGroup: '$(resourceGroup)'
      environmentServiceNameAzureRM: $(subscription)

  - template: templates/deploy-function-app.yml
    parameters:
      dependsOn: ['DeployRepositoryWebApi']
      projectName: repository-func
      jobName: DeployRepositoryFunctionApp
      functionAppName: '$(repositoryFunctionAppName)'
      environmentServiceNameAzureRM: $(subscription)

  - template: templates/deploy-function-app.yml
    parameters:
      dependsOn: ['DeployRepositoryFunctionApp']
      projectName: sync-func
      jobName: DeploySyncFunctionApp
      functionAppName: '$(syncFunctionAppName)'
      environmentServiceNameAzureRM: $(subscription)

  - template: templates/deploy-web-app.yml
    parameters:
      dependsOn: ['DeployRepositoryFunctionApp']
      projectName: servers-webapi
      jobName: DeployServersWebApi
      webAppName: '$(serversWebAppName)'
      webAppNameResourceGroup: '$(resourceGroup)'
      environmentServiceNameAzureRM: $(subscription)
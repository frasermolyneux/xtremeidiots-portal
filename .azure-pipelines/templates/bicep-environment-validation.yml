parameters:
  - name: dependsOn
    type: object
    default: []
  - name: azureSubscription
    type: string
  - name: environment
    type: string
  - name: environmentName
    type: string

jobs:
  - deployment: validate_bicep_against_${{ parameters.environmentName }}_environment
    dependsOn: ${{ parameters.dependsOn }}
    environment: ${{ parameters.environment }}

    workspace:
      clean: all

    strategy:
      runOnce:
        deploy:
          steps:
            - checkout: self

            - task: AzureCLI@2
              name: RunPreflightValidation
              inputs:
                azureSubscription: ${{ parameters.azureSubscription }}
                scriptType: "pscore"
                scriptLocation: "inlineScript"
                inlineScript: |
                  $config = (Get-Content params/platform.${{ parameters.environmentName }}.json | ConvertFrom-Json)

                  az deployment sub validate `
                    --name "portal-web-platform-$($config.parameters.environment.value)-$($config.parameters.instance.value)" `
                    --template-file bicep/platform.bicep `
                    --location $config.parameters.location.value `
                    --parameters @params/platform.$($config.parameters.environment.value).json `
                        keyVaultCreateMode='recover'

                  if ((az group exists --name "rg-portal-web-$($config.parameters.environment.value)-$($config.parameters.location.value)-$($config.parameters.instance.value)") -eq $true) { 
                    az deployment group validate `
                      --name "portal-web-services-$($config.parameters.environment.value)-$($config.parameters.instance.value)" `
                      --resource-group "rg-portal-web-$($config.parameters.environment.value)-$($config.parameters.location.value)-$($config.parameters.instance.value)" `
                      --template-file bicep/services.bicep `
                      --parameters @params/services.$($config.parameters.environment.value).json
                  }

            - task: AzureCLI@2
              name: RunWhatIfDeploy
              inputs:
                azureSubscription: ${{ parameters.azureSubscription }}
                scriptType: "pscore"
                scriptLocation: "inlineScript"
                inlineScript: |
                  az deployment sub what-if `
                    --name "portal-web-platform-$($config.parameters.environment.value)-$($config.parameters.instance.value)" `
                    --template-file bicep/platform.bicep `
                    --location $config.parameters.location.value `
                    --parameters @params/platform.$($config.parameters.environment.value).json

                  if ((az group exists --name "rg-portal-web-$($config.parameters.environment.value)-$($config.parameters.location.value)-$($config.parameters.instance.value)") -eq $true) { 
                    az deployment group what-if `
                      --name "portal-web-services-$($config.parameters.environment.value)-$($config.parameters.instance.value)" `
                      --resource-group "rg-portal-web-$($config.parameters.environment.value)-$($config.parameters.location.value)-$($config.parameters.instance.value)" `
                      --template-file bicep/services.bicep `
                      --parameters @params/services.$($config.parameters.environment.value).json
                  }

parameters:
- name: environment
  default: 'dev'

stages:
- stage: ${{ parameters.environment }}

  variables:
  - name: 'environment'
    value: ${{ parameters.environment }}

  jobs:
  - deployment: terraform_deploy

    pool:
      vmImage: 'ubuntu-latest'

    environment: 'xi-portal-${{ parameters.environment }}'

    strategy:
     runOnce:
       deploy:
        steps:
          - download: current
            displayName: 'Download terraform source artifact'
            artifact: terraform

          - task: AzureKeyVault@1
            inputs:
              azureSubscription: '$(AzSubscription)'
              keyVaultName: 'xi-portal-${{ parameters.environment }}'
              secretsFilter: '*'

          - task: TerraformInstaller@0
            displayName: 'Install terraform'
            inputs:
              terraformVersion: '$(TerraformVersion)'

          - task: TerraformTaskV1@0
            displayName: 'Terraform: azurerm init'
            inputs:
              workingDirectory: '$(Pipeline.Workspace)/terraform'
              backendServiceArm: '$(AzSubscription)'
              backendAzureRmResourceGroupName: '$(AzTerraformResourceGroup)'
              backendAzureRmStorageAccountName: '$(AzTerraformStorageAccount)'
              backendAzureRmContainerName: terraform
              backendAzureRmKey: '${{ parameters.environment }}-terraform.tfstate'

          - task: TerraformTaskV1@0
            displayName: 'Terraform : azurerm plan'
            inputs:
              command: plan
              workingDirectory: '$(Pipeline.Workspace)/terraform'
              commandOptions: '-var="environment=$(environment)"'
              environmentServiceNameAzureRM: '$(AzSubscription)'

          - task: TerraformTaskV1@0
            name: terraform_validate_and_apply
            displayName: 'Terraform : azurerm validate and apply'
            inputs:
              command: apply
              workingDirectory: '$(Pipeline.Workspace)/terraform'
              commandOptions: '-var="environment=$(environment)"'
              environmentServiceNameAzureRM: '$(AzSubscription)'

          - powershell: |
              $terraformOutput = Get-Content "$(terraform_validate_and_apply.jsonOutputVariablesPath)" | ConvertFrom-Json
              $terraformOutput | Get-Member -MemberType NoteProperty | % { $o = $terraformOutput.($_.Name); Write-Host "##vso[task.setvariable variable=$($_.Name);isoutput=true;issecret=$($o.sensitive)]$($o.value)" }
            name: terraform_output
            displayName: 'Read terraform output vars'

  - deployment: 'webapp_deploy'
    dependsOn: 'terraform_deploy'
    pool: 
      vmImage: 'windows-latest'

    environment: 'xi-portal-${{ parameters.environment }}'

    variables:
    - name: identity_storage_connection
      value: $[ dependencies.terraform_deploy.outputs['terraform_deploy.terraform_output.identity_storage_connection'] ]
    - name: appdata_storage_connection
      value: $[ dependencies.terraform_deploy.outputs['terraform_deploy.terraform_output.appdata_storage_connection'] ]
    - name: appinsights_instrumentation_key
      value: $[ dependencies.terraform_deploy.outputs['terraform_deploy.terraform_output.instrumentation_key'] ]
    - name: servicebus_connection_string
      value: $[ dependencies.terraform_deploy.outputs['terraform_deploy.terraform_output.servicebus_connection_string'] ]

    strategy:
     runOnce:
       deploy:
         steps:
          - download: current
            displayName: 'Download webapp artifact'
            artifact: webapp

          - task: AzureKeyVault@1
            inputs:
              azureSubscription: '$(AzSubscription)'
              keyVaultName: 'xi-portal-${{ parameters.environment }}'
              secretsFilter: '*'

          - task: AzureRmWebAppDeployment@4
            displayName: 'Azure App Service Deploy: XI-Portal-WebApp-$(environment)'
            inputs:
              azureSubscription: '$(AzSubscription)'
              WebAppName: 'portal-app-$(environment)'
              deployToSlotOrASE: true
              ResourceGroupName: 'xi-portal-$(environment)'
              packageForLinux: '$(Pipeline.Workspace)/webapp/XI.Portal.Web.zip'
              AppSettings: '-ApplicationInsights:InstrumentationKey "$(appinsights_instrumentation_key)" -ServiceBus:ServiceBusConnectionString "$(servicebus_connection_string)" -AppData:StorageConnectionString "$(appdata_storage_connection)" -ApplicationAuthDbContext:StorageConnectionString "$(identity_storage_connection)" -AppDataContainer:StorageConnectionString "$(appdata_storage_connection)" -XtremeIdiotsAuth:ClientId "$(xtremeidiotsauth-clientid)" -XtremeIdiotsAuth:ClientSecret "$(xtremeidiotsauth-clientsecret)" -XtremeIdiotsForums:ApiKey "$(xtremeidiotsforums-apikey)" -LegacyPortalContext:ConnectionString "$(legacyportalcontext-connectionstring)" -GeoLocation:BaseUrl "$(geolocation-baseurl)" -GeoLocation:ApiKey "$(geolocation-apikey)"'

  - deployment: 'funcapp_deploy'
    dependsOn: 'terraform_deploy'
    pool: 
      vmImage: 'windows-latest'

    environment: 'xi-portal-${{ parameters.environment }}'

    variables:
    - name: appdata_storage_connection
      value: $[ dependencies.terraform_deploy.outputs['terraform_deploy.terraform_output.appdata_storage_connection'] ]
    - name: appinsights_instrumentation_key
      value: $[ dependencies.terraform_deploy.outputs['terraform_deploy.terraform_output.instrumentation_key'] ]
    - name: servicebus_connection_string
      value: $[ dependencies.terraform_deploy.outputs['terraform_deploy.terraform_output.servicebus_connection_string'] ]

    strategy:
     runOnce:
       deploy:
         steps:
          - download: current
            displayName: 'Download funcapp artifact'
            artifact: funcapp

          - task: AzureKeyVault@1
            inputs:
              azureSubscription: '$(AzSubscription)'
              keyVaultName: 'xi-portal-${{ parameters.environment }}'
              secretsFilter: '*'

          - task: AzureFunctionApp@1
            displayName: 'Azure Function App Deploy: XI-Portal-FuncApp-$(Environment)'
            inputs:
              azureSubscription: '$(AzSubscription)'
              appType: functionAppLinux
              appName: 'portal-funcapp-$(environment)'
              deployToSlotOrASE: true
              resourceGroupName: 'xi-portal-$(environment)'
              package: '$(Pipeline.Workspace)/funcapp/XI.Portal.FuncApp.zip'
              runtimeStack: 'DOCKER|microsoft/azure-functions-dotnet-core2.0:2.0'
              AppSettings: '-APPINSIGHTS_INSTRUMENTATIONKEY "$(appinsights_instrumentation_key)" -ServiceBus:ServiceBusConnectionString "$(servicebus_connection_string)" -AppData:StorageConnectionString "$(appdata_storage_connection)" -AppDataContainer:StorageConnectionString "$(appdata_storage_connection)" -LegacyPortalContext:ConnectionString "$(legacyportalcontext-connectionstring)" -GeoLocation:BaseUrl "$(geolocation-baseurl)" -GeoLocation:ApiKey "$(geolocation-apikey)" -MapsRedirect:ApiKey "$(mapsredirect-apikey)" -XtremeIdiotsForums:ApiKey "$(xtremeidiotsforums-apikey)"'
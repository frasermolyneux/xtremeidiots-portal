parameters:
  - name: azureSubscription
    type: string
  - name: environment
    type: string
  - name: environmentName
    type: string
  - name: blueGreenDeploy
    type: boolean
    default: false

stages:
  - stage: deploy_${{ parameters.environmentName }}
    jobs:
      - deployment: deploy_${{ parameters.environmentName }}
        environment: ${{ parameters.environment }}

        workspace:
          clean: all

        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self

                - task: AzureCLI@2
                  displayName: deploy_${{ parameters.environmentName }}_platform_bicep
                  inputs:
                    azureSubscription: ${{ parameters.azureSubscription }}
                    scriptType: "pscore"
                    scriptLocation: "inlineScript"
                    inlineScript: |
                      $config = (Get-Content params/platform.${{ parameters.environmentName }}.json | ConvertFrom-Json)

                      $deletedKeyVaults = az keyvault list-deleted --query '[].properties.vaultId' | ConvertFrom-Json
                      $isDeleted = $deletedKeyVaults | where {$_ -match "rg-portal-web-$($config.parameters.environment.value)-$($config.parameters.location.value)-$($config.parameters.instance.value)"}

                      $keyVaultCreateMode = "default"
                      if ($isDeleted -ne $null) {
                        $keyVaultCreateMode = "recover"
                      }

                      az deployment sub create `
                        --name "portal-web-platform-$($config.parameters.environment.value)-$($config.parameters.instance.value)" `
                        --template-file bicep/platform.bicep `
                        --location $config.parameters.location.value `
                        --parameters @params/platform.$($config.parameters.environment.value).json `
                          keyVaultCreateMode=$keyVaultCreateMode

                - task: AzureCLI@2
                  displayName: deploy_${{ parameters.environmentName }}_services_bicep
                  inputs:
                    azureSubscription: ${{ parameters.azureSubscription }}
                    scriptType: "pscore"
                    scriptLocation: "inlineScript"
                    inlineScript: |
                      $config = (Get-Content params/services.${{ parameters.environmentName }}.json | ConvertFrom-Json)

                      az deployment group create `
                        --name "portal-web-services-$($config.parameters.environment.value)-$($config.parameters.instance.value)" `
                        --resource-group "rg-portal-web-$($config.parameters.environment.value)-$($config.parameters.location.value)-$($config.parameters.instance.value)" `
                        --template-file bicep/services.bicep `
                        --parameters @params/services.$($config.parameters.environment.value).json

                - task: AzureCLI@2
                  name: deploy_outputs
                  inputs:
                    azureSubscription: ${{ parameters.azureSubscription }}
                    scriptType: "pscore"
                    scriptLocation: "inlineScript"
                    inlineScript: |
                      $config = (Get-Content params/services.${{ parameters.environmentName }}.json | ConvertFrom-Json)

                      $deploymentOutput = (az deployment group show --name "portal-web-services-$($config.parameters.environment.value)-$($config.parameters.instance.value)" `
                        --resource-group "rg-portal-web-$($config.parameters.environment.value)-$($config.parameters.location.value)-$($config.parameters.instance.value)") | ConvertFrom-Json

                      echo "##vso[task.setvariable variable=webAppIdentityPrincipalId;isOutput=true]$($deploymentOutput.properties.outputs.webAppIdentityPrincipalId.value)"
                      echo "##vso[task.setvariable variable=webAppName;isOutput=true]$($deploymentOutput.properties.outputs.webAppName.value)"

                      echo "##vso[task.setvariable variable=webAppsResourceGroupName;isOutput=true]rg-portal-web-$($config.parameters.environment.value)-$($config.parameters.location.value)-$($config.parameters.instance.value)"

                - task: AzureCLI@2
                  inputs:
                    azureSubscription: ${{ parameters.azureSubscription }}
                    scriptType: "pscore"
                    scriptLocation: "inlineScript"
                    inlineScript: |
                      $config = (Get-Content params/services.${{ parameters.environmentName }}.json | ConvertFrom-Json)

                      $deploymentOutput = (az deployment group show --name "portal-web-services-$($config.parameters.environment.value)-$($config.parameters.instance.value)" `
                        --resource-group "rg-portal-web-$($config.parameters.environment.value)-$($config.parameters.location.value)-$($config.parameters.instance.value)") | ConvertFrom-Json

                      $principalId = $deploymentOutput.properties.outputs.webAppIdentityPrincipalId.value

                      . scripts/GrantPrincipalAppRole.ps1 `
                        -principalId $principalId `
                        -applicationName $config.parameters.repositoryApi.value.ApplicationName `
                        -appRole "ServiceAccount"

                      . scripts/GrantPrincipalAppRole.ps1 `
                        -principalId $principalId `
                        -applicationName $config.parameters.serversIntegrationApi.value.ApplicationName `
                        -appRole "ServiceAccount"

                      . scripts/AddPrincipalToAADGroup.ps1 `
                        -principalId $principalId `
                        -groupName "sg-sql-platform-admins-$($config.parameters.environment.value)-01"

                - download: current
                  artifact: admin-webapp

                - task: AzureRmWebAppDeployment@4
                  retryCountOnTaskFailure: 3
                  inputs:
                    azureSubscription: ${{ parameters.azureSubscription }}
                    webAppName: $(deploy_outputs.webAppName)
                    resourceGroupName: $(deploy_outputs.webAppsResourceGroupName)
                    packageForLinux: "$(Pipeline.Workspace)/admin-webapp/admin-webapp.zip"

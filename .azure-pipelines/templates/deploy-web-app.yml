parameters:
- name: jobName
  type: string
  default: DeployWebApp
- name: dependsOn
  type: object
  default: []
- name: projectName
  type: string
  default: 'web-app'
- name: webAppName
  type: string
- name: webAppNameResourceGroup
  type: string
- name: blueGreenDeploy
  type: boolean
  default: false
- name: subscription

jobs:
- job: ${{ parameters.jobName }}
  dependsOn: ${{ parameters.dependsOn }}

  steps: 
    - download: current
      displayName: 'Download ${{ parameters.projectName }} artifact'
      artifact: ${{ parameters.projectName }}

    - ${{ if eq(parameters.blueGreenDeploy, false) }}:
      - task: AzureRmWebAppDeployment@4
        displayName: 'Azure App Service Deploy: ${{ parameters.projectName }}'
        inputs:
          azureSubscription: '${{ parameters.subscription }}'
          webAppName: '${{ parameters.webAppName }}'
          resourceGroupName: '${{ parameters.webAppNameResourceGroup }}'
          packageForLinux: '$(Pipeline.Workspace)/${{ parameters.projectName }}/${{ parameters.projectName }}.zip'

    - ${{ if eq(parameters.blueGreenDeploy, true) }}:
      - task: AzureRmWebAppDeployment@4
        displayName: 'Azure App Service Deploy: ${{ parameters.projectName }}'
        inputs:
          azureSubscription: '${{ parameters.subscription }}'
          WebAppName: '${{ parameters.webAppName }}'
          deployToSlotOrASE: true
          slotName: 'staging'
          resourceGroupName: '${{ parameters.webAppNameResourceGroup }}'
          packageForLinux: '$(Pipeline.Workspace)/${{ parameters.projectName }}/${{ parameters.projectName }}.zip'

    - ${{ if eq(parameters.blueGreenDeploy, true) }}:
      - task: AzureAppServiceManage@0
        inputs:
          azureSubscription: '${{ parameters.subscription }}'
          webAppName: '${{ parameters.webAppName }}'
          action: 'Swap Slots'
          resourceGroupName: '${{ parameters.webAppNameResourceGroup }}'
          sourceSlot: 'staging'
          swapWithProduction: 'true'
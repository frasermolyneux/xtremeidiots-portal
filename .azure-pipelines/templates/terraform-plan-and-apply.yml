parameters:
- name: jobName
  type: string
  default: TerraformPlanAndApply
- name: dependsOn
  type: object
  default: []
- name: additionalCommandOptions
  type: string
  default: ""
- name: workingDirectory
- name: backendServiceArm
- name: backendAzureRmResourceGroupName
- name: backendAzureRmStorageAccountName
- name: backendAzureRmContainerName
- name: backendAzureRmKey
- name: environmentServiceNameAzureRM
- name: varFile

jobs:
- job: ${{ parameters.jobName }}
  dependsOn: ${{ parameters.dependsOn }}

  variables:
    commandOptions: '-var-file="${{ parameters.varFile }}" ${{ parameters.additionalCommandOptions }}'

  steps:
    - task: TerraformInstaller@0
      displayName: 'Terraform: Install'
      inputs:
        terraformVersion: '1.1.2'

    - task: TerraformTaskV2@2
      displayName: 'Terraform: Init'
      inputs:
        workingDirectory: '${{ parameters.workingDirectory }}'
        backendServiceArm: '${{ parameters.backendServiceArm }}'
        backendAzureRmResourceGroupName: '${{ parameters.backendAzureRmResourceGroupName }}'
        backendAzureRmStorageAccountName: '${{ parameters.backendAzureRmStorageAccountName }}'
        backendAzureRmContainerName: '${{ parameters.backendAzureRmContainerName }}'
        backendAzureRmKey: '${{ parameters.backendAzureRmKey }}'

    - task: TerraformTaskV2@2
      displayName: 'Terraform: Validate'
      inputs:
        command: validate
        workingDirectory: '${{ parameters.workingDirectory }}'
        environmentServiceNameAzureRM: '${{ parameters.environmentServiceNameAzureRM }}'

    - task: TerraformTaskV2@2
      displayName: 'Terraform: Plan'
      inputs:
        command: plan
        workingDirectory: '${{ parameters.workingDirectory }}'
        commandOptions: '$(commandOptions)'
        environmentServiceNameAzureRM: '${{ parameters.environmentServiceNameAzureRM }}'

    - task: TerraformTaskV2@2
      displayName: 'Terraform: Apply'
      name: 'terraform_apply'
      inputs:
        command: apply
        workingDirectory: '${{ parameters.workingDirectory }}'
        commandOptions: '$(commandOptions)'
        environmentServiceNameAzureRM: '${{ parameters.environmentServiceNameAzureRM }}'

    - powershell: |
        $terraformOutput = Get-Content "$(terraform_apply.jsonOutputVariablesPath)" | ConvertFrom-Json
        $terraformOutput | Get-Member -MemberType NoteProperty | % { 
          $o = $terraformOutput.($_.Name)
          Write-Host "##vso[task.setvariable variable=$($_.Name);isoutput=true;issecret=$($o.sensitive)]$($o.value)" 
          Write-Host "$($_.Name)" 
        }
      name: terraform_output
      displayName: 'Pass-through Terraform Outputs'
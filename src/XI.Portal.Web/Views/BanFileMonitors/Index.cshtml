@inject IAuthorizationService AuthorizationService
@using Microsoft.AspNetCore.Authorization
@using XI.Portal.Web.Auth.Constants
@using XI.Portal.Web.Extensions
@using XI.Portal.Web.Models
@using XtremeIdiots.Portal.RepositoryApi.Abstractions.Constants
@model IEnumerable<BanFileMonitorViewModel>

@{
    ViewData["Title"] = "Ban File Monitor Index";
}

<div class="wrapper wrapper-content animated fadeInRight">

    <div class="alert alert-primary" role="alert">
        <i class="fa fa-info-circle"></i> This section allows you to manage what ban files are monitored on all the servers, ideally there should be one entry per server. If the mod changes then the file path should be updated to reflect that.
    </div>

    <row class="row">
        <div class="col-12">

            <div class="container-fluid">
                <div class="ibox">
                    <div class="ibox-content">
                        <table class="table table-responsive w-100 d-block d-md-table">
                            <thead>
                            <tr>
                                <th>
                                    @Html.DisplayNameFor(model => model.GameServer)
                                </th>
                                <th>
                                    @Html.DisplayNameFor(model => model.FilePath)
                                </th>
                                <th>
                                    Mod Check
                                </th>
                                <th>
                                    @Html.DisplayNameFor(model => model.LastSync)
                                </th>
                                <th></th>
                            </tr>
                            </thead>
                            <tbody>
                            @foreach (var item in Model)
                            {
                                <tr>
                                    <td>
                                        @Html.GameTypeIcon(item.GameServer.GameType.ToString())
                                        @Html.ServerName(item.GameServer.Title, null)
                                    </td>
                                    <td>
                                        @if ((await AuthorizationService.AuthorizeAsync(User, new Tuple<GameType, Guid>(item.GameServer.GameType, item.GameServer.Id), AuthPolicies.ViewFtpCredential)).Succeeded)
                                        {
                                            @Html.MonitorFtpPath(item.GameServer.FtpHostname, item.GameServer.FtpPort, item.FilePath, item.GameServer.FtpUsername, item.GameServer.FtpPassword)
                                        }
                                        else
                                        {
                                            @Html.MonitorFtpPath(item.GameServer.FtpHostname, item.GameServer.FtpPort, item.FilePath)
                                        }
                                    </td>
                                    <td>
                                        @if(item.FilePath.ToLower().Contains(item.GameServer.LiveMod.ToLower()))
                                        {
                                            <span class="badge badge-success">@item.GameServer.LiveMod is included in path</span>
                                        }
                                        else
                                        {
                                            <span class="badge badge-danger">@item.GameServer.LiveMod is not included in path</span>
                                        }
                                    </td>
                                    <td>
                                        @Html.DisplayFor(modelItem => item.LastSync)
                                    </td>
                                    <td>
                                        <div class="btn-group btn-group-sm" role="group">
                                            @if ((await AuthorizationService.AuthorizeAsync(User, new Tuple<GameType, Guid>(item.GameServer.GameType, item.GameServer.Id), AuthPolicies.EditBanFileMonitor)).Succeeded)
                                            {
                                                <a type="button" class="btn btn-primary" asp-action="Edit" asp-route-id="@item.BanFileMonitorId"><i class="fa fa-edit"></i> Edit Monitor</a>
                                            }

                                            @if ((await AuthorizationService.AuthorizeAsync(User, new Tuple<GameType, Guid>(item.GameServer.GameType, item.GameServer.Id), AuthPolicies.EditGameServer)).Succeeded)
                                            {
                                                <a type="button" class="btn btn-primary" asp-controller="GameServers" asp-action="Edit" asp-route-id="@item.GameServer.Id"><i class="fa fa-edit"></i> Edit Game Server</a>
                                            }

                                            @if ((await AuthorizationService.AuthorizeAsync(User, new Tuple<GameType, Guid>(item.GameServer.GameType, item.GameServer.Id), AuthPolicies.ViewBanFileMonitor)).Succeeded)
                                            {
                                                <a type="button" class="btn btn-primary" asp-action="Details" asp-route-id="@item.BanFileMonitorId"><i class="fa fa-info-circle"></i> Details</a>
                                            }

                                            @if ((await AuthorizationService.AuthorizeAsync(User, new Tuple<GameType, Guid>(item.GameServer.GameType, item.GameServer.Id), AuthPolicies.DeleteBanFileMonitor)).Succeeded)
                                            {
                                                <a type="button" class="btn btn-danger" asp-action="Delete" asp-route-id="@item.BanFileMonitorId"><i class="fa fa-trash"></i> Delete</a>
                                            }
                                        </div>
                                    </td>
                                </tr>
                            }
                            </tbody>
                        </table>
                    </div>
                    <div class="ibox-footer">
                        <div class="btn-group btn-group-sm" role="group">
                            <a type="button" class="btn btn-primary" asp-action="Create"><i class="fa fa-plus"></i> Create New</a>
                        </div>
                    </div>
                </div>
            </div>

        </div>
    </row>

</div>
@inject IAuthorizationService AuthorizationService
@using XI.Portal.Web.Extensions
@using Microsoft.AspNetCore.Authorization
@using XI.Portal.Auth.Contract.Constants
@using XtremeIdiots.Portal.RepositoryApi.Abstractions.NetStandard.Constants
@model XI.Portal.Web.Models.GameServerDetailsViewModel

@{
    ViewData["Title"] = "Game Server Details";
}

<div class="wrapper wrapper-content animated fadeInRight">

    <row class="row">
        <div class="col-12">

            <div class="container-fluid">
                <div class="ibox">
                    <div class="ibox-title">
                        @ViewData["Title"]
                    </div>
                    <div class="ibox-content">
                        <dl class="row">
                            <dt class="col-sm-2">
                                @Html.DisplayNameFor(model => model.GameServerDto.Title)
                            </dt>
                            <dd class="col-sm-10">
                                @Html.DisplayFor(model => model.GameServerDto.Title)
                            </dd>
                            <dt class="col-sm-2">
                                @Html.DisplayNameFor(model => model.GameServerDto.GameType)
                            </dt>
                            <dd class="col-sm-10">
                                @Html.DisplayFor(model => model.GameServerDto.GameType)
                            </dd>
                            <dt class="col-sm-2">
                                @Html.DisplayNameFor(model => model.GameServerDto.Hostname)
                            </dt>
                            <dd class="col-sm-10">
                                @Html.ServerHostAndPort(Model.GameServerDto.Hostname, Model.GameServerDto.QueryPort)
                            </dd>

                            @if ((await AuthorizationService.AuthorizeAsync(User, new Tuple<GameType, Guid>(Model.GameServerDto.GameType, Model.GameServerDto.Id), AuthPolicies.ViewFtpCredential)).Succeeded)
                            {
                                <dt class="col-sm-2">
                                    @Html.DisplayNameFor(model => model.GameServerDto.FtpHostname)
                                </dt>
                                <dd class="col-sm-10">
                                    @Html.DisplayFor(model => model.GameServerDto.FtpHostname)
                                </dd>
                                <dt class="col-sm-2">
                                    @Html.DisplayNameFor(model => model.GameServerDto.FtpUsername)
                                </dt>
                                <dd class="col-sm-10">
                                    @Html.DisplayFor(model => model.GameServerDto.FtpUsername)
                                </dd>
                                <dt class="col-sm-2">
                                    @Html.DisplayNameFor(model => model.GameServerDto.FtpPassword)
                                </dt>
                                <dd class="col-sm-10">
                                    @Html.DisplayFor(model => model.GameServerDto.FtpPassword)
                                </dd>
                            }

                            @if ((await AuthorizationService.AuthorizeAsync(User, new Tuple<GameType, Guid>(Model.GameServerDto.GameType, Model.GameServerDto.Id), AuthPolicies.ViewRconCredential)).Succeeded)
                            {
                                <dt class="col-sm-2">
                                    @Html.DisplayNameFor(model => model.GameServerDto.RconPassword)
                                </dt>
                                <dd class="col-sm-10">
                                    @Html.DisplayFor(model => model.GameServerDto.RconPassword)
                                </dd>
                            }

                            <dt class="col-sm-2">
                                @Html.DisplayNameFor(model => model.GameServerDto.ShowOnBannerServerList)
                            </dt>
                            <dd class="col-sm-10">
                                @Html.DisplayFor(model => model.GameServerDto.ShowOnBannerServerList)
                            </dd>
                            <dt class="col-sm-2">
                                @Html.DisplayNameFor(model => model.GameServerDto.BannerServerListPosition)
                            </dt>
                            <dd class="col-sm-10">
                                @Html.DisplayFor(model => model.GameServerDto.BannerServerListPosition)
                            </dd>
                            <dt class="col-sm-2">
                                @Html.DisplayNameFor(model => model.GameServerDto.HtmlBanner)
                            </dt>
                            <dd class="col-sm-10">
                                @Html.Raw(Model.GameServerDto.HtmlBanner)
                            </dd>
                            <dt class="col-sm-2">
                                @Html.DisplayNameFor(model => model.GameServerDto.ShowOnPortalServerList)
                            </dt>
                            <dd class="col-sm-10">
                                @Html.DisplayFor(model => model.GameServerDto.ShowOnPortalServerList)
                            </dd>
                            <dt class="col-sm-2">
                                @Html.DisplayNameFor(model => model.GameServerDto.ShowChatLog)
                            </dt>
                            <dd class="col-sm-10">
                                @Html.DisplayFor(model => model.GameServerDto.ShowChatLog)
                            </dd>
                        </dl>
                    </div>
                    <div class="ibox-footer">
                        <div class="btn-group btn-group-sm" role="group">
                            <a type="button" class="btn btn-primary" asp-action="Edit" asp-route-id="@Model.GameServerDto.Id"><i class="fa fa-edit"></i> Edit</a>
                            <a type="button" class="btn btn-primary" asp-action="Index"><i class="fa fa-arrow-left"></i> Back to List</a>
                        </div>
                    </div>
                </div>
            </div>

        </div>
    </row>

    <row class="row">
        <div class="col-12">

            <div class="container-fluid">
                <div class="ibox">
                    <div class="ibox-title">
                        Ban File Monitors
                    </div>
                    <div class="ibox-content">
                        <table class="table table-responsive w-100 d-block d-md-table">
                            <thead>
                                <tr>
                                    <th>
                                        File Path
                                    </th>
                                    <th>
                                        Last Sync
                                    </th>
                                    <th></th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var item in Model.BanFileMonitors)
                                {
                                    <tr>
                                        <td>
                                            @if ((await AuthorizationService.AuthorizeAsync(User, new Tuple<GameType, Guid>(Model.GameServerDto.GameType, Model.GameServerDto.Id), AuthPolicies.ViewFtpCredential)).Succeeded)
                                            {
                                                @Html.MonitorFtpPath(item.GameServer.FtpHostname, item.FilePath, item.GameServer.FtpUsername, item.GameServer.FtpPassword)
                                            }
                                            else
                                            {
                                                @Html.MonitorFtpPath(item.GameServer.FtpHostname, item.FilePath)
                                            }
                                        </td>
                                        <td>
                                            @Html.DisplayFor(modelItem => item.LastSync)
                                        </td>
                                        <td>
                                            <div class="btn-group btn-group-sm" role="group">
                                                @if ((await AuthorizationService.AuthorizeAsync(User, item, AuthPolicies.EditBanFileMonitor)).Succeeded)
                                                {
                                                    <a type="button" class="btn btn-primary" asp-controller="BanFileMonitors" asp-action="Edit" asp-route-id="@item.BanFileMonitorId"><i class="fa fa-edit"></i> Edit Monitor</a>
                                                }

                                                @if ((await AuthorizationService.AuthorizeAsync(User, item, AuthPolicies.ViewBanFileMonitor)).Succeeded)
                                                {
                                                    <a type="button" class="btn btn-primary" asp-controller="BanFileMonitors" asp-action="Details" asp-route-id="@item.BanFileMonitorId"><i class="fa fa-info-circle"></i> Details</a>
                                                }

                                                @if ((await AuthorizationService.AuthorizeAsync(User, item, AuthPolicies.DeleteBanFileMonitor)).Succeeded)
                                                {
                                                    <a type="button" class="btn btn-danger" asp-controller="BanFileMonitors" asp-action="Delete" asp-route-id="@item.BanFileMonitorId"><i class="fa fa-trash"></i> Delete</a>
                                                }
                                            </div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>

        </div>
    </row>

</div>
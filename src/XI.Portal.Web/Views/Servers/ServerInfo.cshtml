@using XI.Portal.Web.Extensions
@using XI.Portal.Web.Models
@model ServersGameServerViewModel

@{
    ViewData["Title"] = "Server Info";
}

<div class="wrapper wrapper-content animated fadeInRight">

<div class="row">
    <div class="col-sm-3">

        <div class="ibox">
            <div class="ibox-title">
                <h5>@Html.ServerName(Model.GameServer.Title, Model.GameServer.LiveTitle)</h5>
            </div>

            <div class="ibox-content">

                @if (Model.Map != null)
                {
                    @Html.MapImage(Model.Map.MapImageUri)
                    <br/>
                }

                <table class="table table-responsive w-100 d-block d-md-table">
                    <tbody>
                    <tr>
                        <td>
                            <strong>Hostname</strong>
                        </td>
                        <td>@Html.ServerHostAndPort(Model.GameServer.Hostname, Model.GameServer.QueryPort)</td>
                    </tr>

                    @if (!string.IsNullOrWhiteSpace(Model.GameServer.LiveMod))
                    {
                        <tr>
                            <td>
                                <strong>Mod</strong>
                            </td>
                            <td>@Model.GameServer.LiveMod</td>
                        </tr>  
                    }

                    @if (!string.IsNullOrWhiteSpace(Model.GameServer.LiveMap))
                    {
                        <tr>
                            <td>
                                <strong>Map</strong>
                            </td>
                            <td>@Model.GameServer.LiveMap</td>
                        </tr>       
                    }

                    @if (Model.GameServer.LiveCurrentPlayers != 0 && Model.GameServer.LiveMaxPlayers != 0)
                    {
                        <tr>
                            <td>
                                <strong>Player Count</strong>
                            </td>
                            <td>@Model.GameServer.LiveCurrentPlayers / @Model.GameServer.LiveMaxPlayers</td>
                        </tr>       
                    }

                    <tr>
                        <td>
                            <strong>Connect</strong>
                        </td>
                        <td>
                            @Html.GameTrackerIcon(Model.GameServer.Hostname, Model.GameServer.QueryPort)
                            @Html.SteamIcon(Model.GameServer.GameType.ToString(), Model.GameServer.Hostname, Model.GameServer.QueryPort)
                            @Html.HlswIcon(Model.GameServer.GameType.ToString(), Model.GameServer.Hostname, Model.GameServer.QueryPort)
                        </td>
                    </tr>


                    </tbody>
                </table>

                @if (Model.Map != null)
                {
                    <hr/>

                    <h5>@Model.Map.MapName Files:</h5>
                    <ul>
                        @foreach (var mapFile in Model.Map.MapFiles)
                        {
                            <li>
                                <a href="@mapFile.Url">@mapFile.FileName</a>
                            </li>
                        }
                    </ul>
                }

                <hr/>

                <div id="playerCountChart" style="height: 200px; width: 100%;"></div>

            </div>
        </div>

    </div>

    <div class="col-sm-9">

        <div class="ibox">
            <div class="ibox-content">

                <ul class="nav nav-tabs">
                    <li class="nav-item">
                        <a class="nav-link active" data-toggle="tab" href="#home">Players</a>
                    </li>
                    @if (Model.LivePlayers != null && Model.LivePlayers.Any())
                    {
                        <li class="nav-item">
                            <a class="nav-link" data-toggle="tab" href="#menu1">Player Map</a>
                        </li>
                    }
                </ul>

                <div class="tab-content">
                    <div class="tab-pane container active" id="home">
                        @if (Model.GameServer.LiveCurrentPlayers == 0)
                        {
                            <h2 style="text-align: center">There are currently no connected players</h2>
                        }
                        else
                        {
                            <table class="table">
                                <tr>
                                    <th>
                                        @Html.Label("Num")
                                    </th>
                                    <th>
                                        @Html.Label("Name")
                                    </th>
                                    <th>
                                        @Html.Label("Score")
                                    </th>
                                </tr>

                                @foreach (var item in Model.LivePlayers.OrderByDescending(lp => lp.Score))
                                {
                                    <tr>
                                       <td>
                                            @Html.DisplayFor(model => item.Num)
                                        </td>
                                        <td>
                                            @item.CountryCode.FlagImage()
                                            @Html.PlayerName(item.Name)
                                        </td>
                                        <td>
                                            @Html.DisplayFor(model => item.Score)
                                        </td>

                                    </tr>
                                }

                            </table>
                        }
                    </div>
                    @if (Model.LivePlayers.Any())
                    {
                        <div class="tab-pane container fade" id="menu1">
                            <div id="map" style="height: 600px; width: 100%;"></div>
                        </div>
                    }
                </div>
            </div>
        </div>

    </div>
</div>

@if (Model.GameServerStats.Any())
{
    <div class="row">
        <div class="col-12">

            <div class="ibox">
                <div class="ibox-title">
                    <h5>Map Timeline (Last 24 hours)</h5>
                </div>

                @{
                    var mapTimelineHeight = Model.GameServerStats.GroupBy(m => m.MapName).ToList().Count * 41 + 50;
                }

                <div id="mapsTimeline" style="height: @(mapTimelineHeight)px; width: 100%;"></div>
            </div>
        </div>
    </div>
}

@if (Model.Maps.Any())
{
    <div class="row">
        <div class="col-12">

            <div class="ibox">
                <div class="ibox-title">
                    <h5>Current Map Rotation</h5>
                </div>

                <div class="ibox-content">

                    <table class="table">
                        <tr>
                            <th>
                                @Html.Label("Name")
                            </th>
                            <th>
                                @Html.Label("Files")
                            </th>
                            <th>
                                @Html.Label("Popularity")
                            </th>
                            <th>
                            </th>
                        </tr>

                        @foreach (var item in Model.Maps)
                        {
                            <tr>
                                <td>
                                    @Html.DisplayFor(modelItem => item.MapName)
                                </td>
                                <td>
                                    @foreach (var mapFile in item.MapFiles)
                                    {
                                        <li>
                                            <a href="@mapFile.Url">@mapFile.FileName</a>
                                        </li>
                                    }
                                </td>
                                <td>
                                    @Html.MapPopularity(item.MapName, item.LikePercentage, item.DislikePercentage, item.TotalLikes, item.TotalDislikes, item.TotalVotes)
                                </td>
                                <td>
                                    @Html.MapImage(item.MapImageUri)
                                </td>
                            </tr>
                        }

                    </table>

                </div>
            </div>

        </div>
    </div>
}

</div>


@* ReSharper disable once Razor.SectionNotResolved *@

@section Scripts {

    @if (Model.LivePlayers.Any())
    {
        <script>
            function initMap() {

                var map = new google.maps.Map(document.getElementById('map'),
                    {
                        zoom: 2,
                        center: { lat: 0.00, lng: 0.00 }
                    });

                var locations = [
                    @foreach (var player in Model.LivePlayers)
                    {
                        if (player.Lat == null && player.Long == null)
                        {
                            continue;
                        }

                        <text>
                            ['Player', @player.Lat, @player.Long],
                        </text>
                    }
                ];

                for (var count = 0; count < locations.length; count++) {
                    new google.maps.Marker({
                        position: new google.maps.LatLng(locations[count][1], locations[count][2]),
                        map: map,
                        title: locations[count][0]
                    });
                }
            }
        </script>

        <script async defer src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBTtnBCPGgfMxfohkzdaSsJEzC_y40bcpY&signed_in=false&callback=initMap"></script>
    }

    <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
    <script type="text/javascript">
        google.charts.load('current', { 'packages': ['corechart'] });
        google.charts.setOnLoadCallback(drawPlayerCountChart);

        function drawPlayerCountChart() {
            var playerCountData = new google.visualization.DataTable();
            playerCountData.addColumn('date', 'Timestamp');
            playerCountData.addColumn('number', 'Player Count');

            playerCountData.addRows([

                @foreach (var item in Model.GameServerStats)
                {
                    <text>
                        [new Date(@item.Timestamp.Year, @item.Timestamp.Month, @item.Timestamp.Day, @item.Timestamp.Hour, @item.Timestamp.Minute, @item.Timestamp.Second), @item.PlayerCount],
                    </text>
                }

            ]);

            var playerCountOptions = {
                title: 'Player Count (Last 48 hours)',
                curveType: 'function',
                legend: { position: 'bottom' },
                seriesType: 'line'
            };

            var chart = new google.visualization.LineChart(document.getElementById('playerCountChart'));
            chart.draw(playerCountData, playerCountOptions);
        }
    </script>

    @if (Model.MapTimelineDataPoints.Any())
    {
        <script type="text/javascript">
            google.charts.load("current", { packages: ["timeline"] });
            google.charts.setOnLoadCallback(drawMapTimelineChart);

            function drawMapTimelineChart() {

                var container = document.getElementById('mapsTimeline');
                var chart = new google.visualization.Timeline(container);
                var dataTable = new google.visualization.DataTable();
                dataTable.addColumn({ type: 'string', id: 'Map Name' });
                dataTable.addColumn({ type: 'date', id: 'Start' });
                dataTable.addColumn({ type: 'date', id: 'End' });
                dataTable.addRows([

                    @foreach(var mapTimelineDataPoints in Model.MapTimelineDataPoints)
                    {
                        <text>
                            [
                                '@mapTimelineDataPoints.MapName',
                                new Date(@mapTimelineDataPoints.Start.Year, @mapTimelineDataPoints.Start.Month, @mapTimelineDataPoints.Start.Day, @mapTimelineDataPoints.Start.Hour, @mapTimelineDataPoints.Start.Minute, @mapTimelineDataPoints.Start.Second),
                                new Date(@mapTimelineDataPoints.End.Year, @mapTimelineDataPoints.End.Month, @mapTimelineDataPoints.End.Day, @mapTimelineDataPoints.End.Hour, @mapTimelineDataPoints.End.Minute, @mapTimelineDataPoints.End.Second)
                            ],
                        </text>
                    }
                ]);

                chart.draw(dataTable);
            }
        </script>
    }
}
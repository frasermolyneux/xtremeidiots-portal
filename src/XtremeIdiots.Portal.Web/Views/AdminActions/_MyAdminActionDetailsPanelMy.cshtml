@using XtremeIdiots.Portal.Repository.Abstractions.Constants.V1
@using XtremeIdiots.Portal.Repository.Abstractions.Models.V1.AdminActions
@model XtremeIdiots.Portal.Web.ViewModels.MyAdminActionDetailsViewModel
@inject Microsoft.Extensions.Configuration.IConfiguration Configuration

@if (Model?.AdminAction is null)
{
    <div class="alert alert-warning">Admin action not found.</div>
    return;
}
@{
    var adminAction = Model.AdminAction;
    var player = Model.Player;
    var cardStyle = adminAction.Type switch
    {
        AdminActionType.Ban => "danger",
        AdminActionType.TempBan => "warning",
        AdminActionType.Kick => "info",
        _ => "primary"
    };
    var iconClass = adminAction.Type switch
    {
        AdminActionType.Ban => "fa fa-ban",
        AdminActionType.TempBan => "fa fa-clock",
        AdminActionType.Kick => "fa fa-sign-out",
        _ => "fa fa-gavel"
    };
    var gameType = player?.GameType;
    var userForumId = adminAction.UserProfile?.XtremeIdiotsForumId;
    var forumBase = Configuration["AdminActions:ForumBaseUrl"] ?? "https://www.xtremeidiots.com/forums/topic/";
}
<div class="my-action-details-inner">
    <div class="d-flex align-items-start mb-3 gap-3 flex-wrap">
        <div class="flex-shrink-0"><i class="@iconClass text-@cardStyle" style="font-size:2rem;"></i></div>
        <div class="flex-grow-1 min-w-0">
            <h5 class="mb-1 text-truncate">@adminAction.Type on @if (player is not null){
            <a asp-controller="Players"
                    asp-action="Details" asp-route-id="@adminAction.PlayerId">@player.Username</a>
                        } else
                {

                        <span>@adminAction.PlayerId</span>
                    }
</h5>
            <div class="small text-muted">Created <time time-ago utc="@adminAction.Created"></time>
                @if (adminAction.Expires.HasValue)
                {
                    <span>| <expiry-badge expires-utc="@adminAction.Expires" user="@User"></expiry-badge></span>
                }
 @if (player?.GameType is not null)
{
                        <span class="ms-1">| @Html.GameTypeIcon(player.GameType) </span>
                    }
</div>
            @if (adminAction.ForumTopicId.HasValue && adminAction.ForumTopicId.Value != 0)
            {
                <div class="mt-1"><a class="small" target="_blank" href="@forumBase@adminAction.ForumTopicId-topic/">View forum
                        topic</a></div>
            }
        </div>
    </div>

    <div class="row g-3 mb-3">
        <div class="col-sm-6 col-md-5">
            <div class="border rounded p-2 h-100">
                <div class="fw-semibold mb-1 small text-uppercase text-muted">Player</div>
                <div class="mb-1"><strong>@player?.Username</strong></div>
                <div class="small text-muted">Guid: @player?.Guid</div>
                @* Country information not available on PlayerDto (CountryCode removed) *@
            </div>
        </div>
        <div class="col-sm-6 col-md-7">
            <div class="border rounded p-2 h-100">
                <div class="fw-semibold mb-1 small text-uppercase text-muted">Action</div>
                <div class="small">Type: @adminAction.Type</div>
                <div class="small">Status: @(adminAction.Expires.HasValue && adminAction.Expires < DateTime.UtcNow ? "Expired" :
                                        (adminAction.Type == AdminActionType.Ban && !adminAction.Expires.HasValue ? "Permanent" : "Active"))</div>
                <div class="small">Admin: @(adminAction.UserProfile?.DisplayName ?? "Unclaimed")</div>
            </div>
        </div>
    </div>

    <div class="mb-3">
        <div class="fw-semibold mb-1 small text-uppercase text-muted">Reason / Notes</div>
        <div class="admin-action-text border rounded p-2"
            style="max-height:220px; overflow:auto; white-space:pre-wrap;">@Html.Raw(adminAction.Text)</div>
    </div>

    <div class="d-flex flex-wrap gap-2 mb-2">
        @* Reuse original authorization logic *@
        @if (gameType != null && (await AuthorizationService.AuthorizeAsync(User, new Tuple<GameType, AdminActionType,
                string?>(gameType.Value, adminAction.Type, userForumId), AuthPolicies.EditAdminAction)).Succeeded)
        {
            <a asp-controller="AdminActions" asp-action="Edit" asp-route-id="@adminAction.AdminActionId"
                class="btn btn-outline-primary btn-sm"><i class="fa fa-edit me-1"></i> Edit</a>
        }
        @if ((adminAction.Type == AdminActionType.Ban && adminAction.Expires is null) || (adminAction.Type == AdminActionType.TempBan &&
                adminAction.Expires > DateTime.UtcNow))
        {
            if (gameType != null && (await AuthorizationService.AuthorizeAsync(User, new Tuple<GameType,
            string?>(gameType.Value, userForumId), AuthPolicies.LiftAdminAction)).Succeeded)
            {
                <a asp-controller="AdminActions" asp-action="Lift" asp-route-id="@adminAction.AdminActionId"
                    class="btn btn-outline-warning btn-sm"><i class="fa fa-unlock me-1"></i> Lift</a>
            }
        }
        @if (adminAction.Type == AdminActionType.Ban && adminAction.UserProfile is null)
        {
            if (gameType != null && (await AuthorizationService.AuthorizeAsync(User, gameType.Value,
            AuthPolicies.ClaimAdminAction)).Succeeded)
            {
                <a asp-controller="AdminActions" asp-action="Claim" asp-route-id="@adminAction.AdminActionId"
                    class="btn btn-outline-info btn-sm"><i class="fa fa-user me-1"></i> Claim</a>
            }
        }
        @if (adminAction.ForumTopicId == 0)
        {
            if (gameType != null && (await AuthorizationService.AuthorizeAsync(User, gameType.Value,
            AuthPolicies.CreateAdminActionTopic)).Succeeded)
            {
                <a asp-controller="AdminActions" asp-action="CreateDiscussionTopic" asp-route-id="@adminAction.AdminActionId"
                    class="btn btn-outline-success btn-sm"><i class="fa fa-plus me-1"></i> Create Topic</a>
            }
        }
        @if ((await AuthorizationService.AuthorizeAsync(User, AuthPolicies.DeleteAdminAction)).Succeeded)
        {
            <a asp-controller="AdminActions" asp-action="Delete" asp-route-id="@adminAction.AdminActionId"
                class="btn btn-outline-danger btn-sm"><i class="fa fa-trash me-1"></i> Delete</a>
        }
    </div>
</div>

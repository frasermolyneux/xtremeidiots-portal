@using XtremeIdiots.Portal.Web.Extensions
@using XtremeIdiots.Portal.Repository.Abstractions.Constants.V1
@using System.Linq
@model XtremeIdiots.Portal.Web.ViewModels.IPAddressDetailsViewModel

@{
    ViewData["Title"] = "IP Address Details: " + Model.IpAddress;
}

<div class="wrapper wrapper-content animated fadeInRight">
    <div class="row">
        <!-- IP Address Summary Card -->
        <div class="col-lg-4">
            <div class="ibox">
                <div class="ibox-title">
                    <h5>IP Address Summary</h5>
                </div>
                <div class="ibox-content">
                    <div class="text-center m-b-md">
                        <h2>@Model.IpAddress.FormatIPAddress(Model.GeoLocation, Model.ProxyCheck?.RiskScore, Model.ProxyCheck?.IsProxy, Model.ProxyCheck?.IsVpn, Model.ProxyCheck?.Type, false)</h2>
                    </div>
                    <div class="stats-container">
                        <div class="stat-item">
                            <i class="fa fa-users fa-2x text-navy"></i>
                            <h3>@Model.TotalPlayersCount</h3>
                            <p>Players used this IP</p>
                        </div>
                        @if (Model.GeoLocation != null)
                        {
                            <div class="stat-item">                <span class="fa-stack fa-2x">
                                    <i class="fa fa-circle fa-stack-2x text-navy"></i>
                                    @{                                        @if (Model.GeoLocation != null)
                                        {
                                            string flagHtml = Model.GeoLocation.FlagImage().ToString().Replace("<img", "<img class=\"fa-stack-1x\" style=\"height:32px;width:auto;top:20%;\"");
                                            @Html.Raw(flagHtml)
                                        }
                                    }
                                </span>
                                <h3>@Model.GeoLocation?.CountryName</h3>
                                <p>@(string.IsNullOrEmpty(Model.GeoLocation?.CityName) ? "Unknown City" : Model.GeoLocation?.CityName)</p>
                            </div>
                        }
                        @if (Model.ProxyCheck != null && !Model.ProxyCheck.IsError)
                        {
                            <div class="stat-item">
                                <i class="fa fa-shield fa-2x @(Model.ProxyCheck.RiskScore >= 50 ? "text-danger" : "text-success")"></i>
                                <h3>Risk Score: @Model.ProxyCheck.RiskScore</h3>
                                <p>
                                    @if (Model.ProxyCheck.IsProxy || Model.ProxyCheck.IsVpn)
                                    {
                                        <span class="badge rounded-pill text-bg-danger">@Model.ProxyCheck.Type</span>
                                    }
                                    else
                                    {
                                        <span class="badge rounded-pill text-bg-success">Clean</span>
                                    }
                                </p>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>

        <!-- GeoLocation Card -->
        <div class="col-lg-4">
            <div class="ibox">
                <div class="ibox-title">
                    <h5>GeoLocation Data</h5>
                </div>
                <div class="ibox-content">
                    @if (Model.GeoLocation != null)
                    {
                        <div class="m-b-md">
                            <div>
                                <h4>@Html.Raw(Model.GeoLocation.FlagImage().Value) @Model.GeoLocation.LocationSummary()</h4>
                            </div>

                            <table class="table table-bordered">
                                <tbody>
                                    <tr>
                                        <th>Country</th>
                                        <td>@Model.GeoLocation.CountryName (@Model.GeoLocation.CountryCode)</td>
                                    </tr>
                                    @if (!string.IsNullOrEmpty(Model.GeoLocation.CityName))
                                    {
                                        <tr>
                                            <th>City</th>
                                            <td>@Model.GeoLocation.CityName</td>
                                        </tr>
                                    }
                                    @if (Model.GeoLocation.Latitude != 0 || Model.GeoLocation.Longitude != 0)
                                    {
                                        <tr>
                                            <th>Coordinates</th>
                                            <td>@Model.GeoLocation.Latitude, @Model.GeoLocation.Longitude</td>
                                        </tr>
                                    }
                                    @if (!string.IsNullOrEmpty(Model.GeoLocation.RegisteredCountry))
                                    {
                                        <tr>
                                            <th>Registered Country</th>
                                            <td>@Model.GeoLocation.RegisteredCountry</td>
                                        </tr>
                                    }
                                    @if (!string.IsNullOrEmpty(Model.GeoLocation.Timezone))
                                    {
                                        <tr>
                                            <th>Time Zone</th>
                                            <td>@Model.GeoLocation.Timezone</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>

                            <div id="map" style="height: 250px; width: 100%; margin-top: 15px;"></div>
                            <a href="https://www.geo-location.net/Home/LookupAddress/@Model.IpAddress" target="_blank" class="btn btn-outline btn-primary btn-sm mt-2">
                                <i class="fa fa-external-link"></i> View on geo-location.net
                            </a>
                        </div>
                    }
                    else
                    {
                        <div class="alert alert-info">
                            <i class="fa fa-info-circle"></i> No GeoLocation data available for this IP address.
                        </div>
                    }
                </div>
            </div>
        </div>

        <!-- ProxyCheck Card -->
        <div class="col-lg-4">
            <div class="ibox">
                <div class="ibox-title">
                    <h5>ProxyCheck Data</h5>
                </div>
                <div class="ibox-content">
                    @if (Model.ProxyCheck != null && !Model.ProxyCheck.IsError)
                    {
                        <div class="m-b-md">
                            <div class="text-center m-b-md">
                                <div class="risk-score-gauge">
                                    <h3>Risk Score</h3>
                                    <div class="gauge-container">
                                        <div class="gauge" data-risk-score="@Model.ProxyCheck.RiskScore">
                                            <span class="gauge-value">@Model.ProxyCheck.RiskScore</span>
                                        </div>
                                    </div>
                                    <span class="badge rounded-pill @Model.ProxyCheck.GetRiskClass()">@Model.ProxyCheck.RiskScore</span>
                                </div>
                            </div>

                            <table class="table table-bordered">
                                <tbody>
                                    <tr>
                                        <th>Status</th>
                                        <td>
                                            @if (Model.ProxyCheck.IsProxy)
                                            {
                                                <span class="badge rounded-pill text-bg-danger">Proxy</span>
                                            }
                                            @if (Model.ProxyCheck.IsVpn)
                                            {
                                                <span class="badge rounded-pill text-bg-warning">VPN</span>
                                            }
                                            @if (!Model.ProxyCheck.IsProxy && !Model.ProxyCheck.IsVpn)
                                            {
                                                <span class="badge rounded-pill text-bg-success">Clean</span>
                                            }
                                        </td>
                                    </tr>
                                    @if (!string.IsNullOrEmpty(Model.ProxyCheck.Type))
                                    {
                                        <tr>
                                            <th>Type</th>
                                            <td>@Model.ProxyCheck.Type</td>
                                        </tr>
                                    }
                                    @if (!string.IsNullOrEmpty(Model.ProxyCheck.Country))
                                    {
                                        <tr>
                                            <th>Country</th>
                                            <td>@Model.ProxyCheck.Country</td>
                                        </tr>
                                    }
                                    @if (!string.IsNullOrEmpty(Model.ProxyCheck.Region))
                                    {
                                        <tr>
                                            <th>Region</th>
                                            <td>@Model.ProxyCheck.Region</td>
                                        </tr>
                                    }
                                    @if (!string.IsNullOrEmpty(Model.ProxyCheck.AsNumber))
                                    {
                                        <tr>
                                            <th>AS Number</th>
                                            <td>@Model.ProxyCheck.AsNumber</td>
                                        </tr>
                                    }
                                    @if (!string.IsNullOrEmpty(Model.ProxyCheck.AsOrganization))
                                    {
                                        <tr>
                                            <th>AS Organization</th>
                                            <td>@Model.ProxyCheck.AsOrganization</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>

                            <a href="https://proxycheck.io/v2/@Model.IpAddress" target="_blank" class="btn btn-outline btn-primary btn-sm mt-2">
                                <i class="fa fa-external-link"></i> View on ProxyCheck.io
                            </a>
                        </div>
                    }
                    else
                    {
                        <div class="alert alert-info">
                            <i class="fa fa-info-circle"></i> No ProxyCheck data available for this IP address.
                            @if (Model.ProxyCheck?.IsError == true && !string.IsNullOrEmpty(Model.ProxyCheck.ErrorMessage))
                            {
                                <p class="mb-0 mt-2">Error: @Model.ProxyCheck.ErrorMessage</p>
                            }
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

    <!-- Players Table Card -->
    <div class="row">
        <div class="col-lg-12">
            <div class="ibox">
                <div class="ibox-title">
                    <h5>Players Using This IP Address</h5>
                </div>
                <div class="ibox-content">
                    @if (Model.Players != null && Model.Players.Any())
                    {
                        <table class="table table-striped table-hover">                            <thead>
                                <tr>
                                    <th>Game</th>
                                    <th>Username</th>
                                    <th>GUID</th>
                                    <th>First Seen</th>
                                    <th>Last Seen</th>
                                    <th data-toggle="tooltip" data-placement="bottom" title="Confidence is determined by the amount of times that the IP Address has been linked to the GUID">
                                        Confidence
                                    </th>
                                    <th>Tags</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var player in Model.Players)
                                {
                                    <tr>
                                        <td>@Html.GameTypeIcon(player.GameType)</td>
                                        <td>
                                            <a asp-controller="Players" asp-action="Details" asp-route-id="@player.PlayerId">
                                                @player.Username
                                            </a>
                                        </td>
                                        <td>@Html.GuidLink(player.Guid, player.GameType.ToString())</td>
                                        <td><time user-time utc="@player.FirstSeen"></time></td>
                                        <td><time user-time utc="@player.LastSeen"></time></td>
                                        <td>
                                            @{
                                                var ipAddress = player.PlayerIpAddresses.FirstOrDefault(p => p.Address == Model.IpAddress);
                                                <confidence-label score="@(ipAddress?.ConfidenceScore ?? 0)" last-used="@(ipAddress?.LastUsed ?? DateTime.UtcNow)"></confidence-label>
                                            }
                                        </td>
                                        <td>
                                            @if (player.Tags != null && player.Tags.Any())
                                            {
                                                foreach (var tag in player.Tags)
                                                {
                                                    @Html.Raw(tag.Tag?.TagHtml)
                                                }
                                            }
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>

                        @if (Model.TotalPlayersCount > Model.Players.Count())
                        {
                            <div class="alert alert-info">
                                <i class="fa fa-info-circle"></i> Showing @Model.Players.Count() of @Model.TotalPlayersCount players.
                            </div>
                        }
                    }
                    else
                    {
                        <div class="alert alert-info">
                            <i class="fa fa-info-circle"></i> No players found using this IP address.
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@section Styles {
    <style>
        .stats-container {
            display: flex;
            justify-content: space-around;
            text-align: center;
            margin-top: 20px;
        }

        .stat-item {
            padding: 15px;
        }

        .risk-score-gauge {
            text-align: center;
            margin-bottom: 20px;
        }

        .gauge-container {
            width: 150px;
            height: 150px;
            margin: 0 auto;
            position: relative;
        }

        .gauge {
            width: 100%;
            height: 100%;
            border-radius: 50%;
            border: 10px solid #f1f1f1;
            position: relative;
        }

        .gauge-value {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            font-size: 24px;
            font-weight: bold;
        }

        /* Color the gauge based on risk score */
        .gauge[data-risk-score="0"] { border-color: #28a745; }
        .gauge[data-risk-score="1"] { border-color: #28a745; }
        .gauge[data-risk-score="2"] { border-color: #28a745; }
        .gauge[data-risk-score="3"] { border-color: #28a745; }
        .gauge[data-risk-score="4"] { border-color: #28a745; }
        .gauge[data-risk-score="5"] { border-color: #28a745; }
        .gauge[data-risk-score="6"] { border-color: #28a745; }
        .gauge[data-risk-score="7"] { border-color: #28a745; }
        .gauge[data-risk-score="8"] { border-color: #28a745; }
        .gauge[data-risk-score="9"] { border-color: #28a745; }
        .gauge[data-risk-score="10"] { border-color: #28a745; }
        .gauge[data-risk-score="11"] { border-color: #28a745; }
        .gauge[data-risk-score="12"] { border-color: #28a745; }
        .gauge[data-risk-score="13"] { border-color: #28a745; }
        .gauge[data-risk-score="14"] { border-color: #28a745; }
        .gauge[data-risk-score="15"] { border-color: #28a745; }
        .gauge[data-risk-score="16"] { border-color: #28a745; }
        .gauge[data-risk-score="17"] { border-color: #28a745; }
        .gauge[data-risk-score="18"] { border-color: #28a745; }
        .gauge[data-risk-score="19"] { border-color: #28a745; }
        .gauge[data-risk-score="20"] { border-color: #28a745; }
        .gauge[data-risk-score="21"] { border-color: #28a745; }
        .gauge[data-risk-score="22"] { border-color: #28a745; }
        .gauge[data-risk-score="23"] { border-color: #28a745; }
        .gauge[data-risk-score="24"] { border-color: #28a745; }
        .gauge[data-risk-score="25"] { border-color: #17a2b8; }
        .gauge[data-risk-score="26"] { border-color: #17a2b8; }
        .gauge[data-risk-score="27"] { border-color: #17a2b8; }
        .gauge[data-risk-score="28"] { border-color: #17a2b8; }
        .gauge[data-risk-score="29"] { border-color: #17a2b8; }
        .gauge[data-risk-score="30"] { border-color: #17a2b8; }
        .gauge[data-risk-score="31"] { border-color: #17a2b8; }
        .gauge[data-risk-score="32"] { border-color: #17a2b8; }
        .gauge[data-risk-score="33"] { border-color: #17a2b8; }
        .gauge[data-risk-score="34"] { border-color: #17a2b8; }
        .gauge[data-risk-score="35"] { border-color: #17a2b8; }
        .gauge[data-risk-score="36"] { border-color: #17a2b8; }
        .gauge[data-risk-score="37"] { border-color: #17a2b8; }
        .gauge[data-risk-score="38"] { border-color: #17a2b8; }
        .gauge[data-risk-score="39"] { border-color: #17a2b8; }
        .gauge[data-risk-score="40"] { border-color: #17a2b8; }
        .gauge[data-risk-score="41"] { border-color: #17a2b8; }
        .gauge[data-risk-score="42"] { border-color: #17a2b8; }
        .gauge[data-risk-score="43"] { border-color: #17a2b8; }
        .gauge[data-risk-score="44"] { border-color: #17a2b8; }
        .gauge[data-risk-score="45"] { border-color: #17a2b8; }
        .gauge[data-risk-score="46"] { border-color: #17a2b8; }
        .gauge[data-risk-score="47"] { border-color: #17a2b8; }
        .gauge[data-risk-score="48"] { border-color: #17a2b8; }
        .gauge[data-risk-score="49"] { border-color: #17a2b8; }
        .gauge[data-risk-score="50"] { border-color: #ffc107; }
        .gauge[data-risk-score="51"] { border-color: #ffc107; }
        .gauge[data-risk-score="52"] { border-color: #ffc107; }
        .gauge[data-risk-score="53"] { border-color: #ffc107; }
        .gauge[data-risk-score="54"] { border-color: #ffc107; }
        .gauge[data-risk-score="55"] { border-color: #ffc107; }
        .gauge[data-risk-score="56"] { border-color: #ffc107; }
        .gauge[data-risk-score="57"] { border-color: #ffc107; }
        .gauge[data-risk-score="58"] { border-color: #ffc107; }
        .gauge[data-risk-score="59"] { border-color: #ffc107; }
        .gauge[data-risk-score="60"] { border-color: #ffc107; }
        .gauge[data-risk-score="61"] { border-color: #ffc107; }
        .gauge[data-risk-score="62"] { border-color: #ffc107; }
        .gauge[data-risk-score="63"] { border-color: #ffc107; }
        .gauge[data-risk-score="64"] { border-color: #ffc107; }
        .gauge[data-risk-score="65"] { border-color: #ffc107; }
        .gauge[data-risk-score="66"] { border-color: #ffc107; }
        .gauge[data-risk-score="67"] { border-color: #ffc107; }
        .gauge[data-risk-score="68"] { border-color: #ffc107; }
        .gauge[data-risk-score="69"] { border-color: #ffc107; }
        .gauge[data-risk-score="70"] { border-color: #ffc107; }
        .gauge[data-risk-score="71"] { border-color: #ffc107; }
        .gauge[data-risk-score="72"] { border-color: #ffc107; }
        .gauge[data-risk-score="73"] { border-color: #ffc107; }
        .gauge[data-risk-score="74"] { border-color: #ffc107; }
        .gauge[data-risk-score="75"] { border-color: #ffc107; }
        .gauge[data-risk-score="76"] { border-color: #ffc107; }
        .gauge[data-risk-score="77"] { border-color: #ffc107; }
        .gauge[data-risk-score="78"] { border-color: #ffc107; }
        .gauge[data-risk-score="79"] { border-color: #ffc107; }
        .gauge[data-risk-score="80"] { border-color: #dc3545; }
        .gauge[data-risk-score="81"] { border-color: #dc3545; }
        .gauge[data-risk-score="82"] { border-color: #dc3545; }
        .gauge[data-risk-score="83"] { border-color: #dc3545; }
        .gauge[data-risk-score="84"] { border-color: #dc3545; }
        .gauge[data-risk-score="85"] { border-color: #dc3545; }
        .gauge[data-risk-score="86"] { border-color: #dc3545; }
        .gauge[data-risk-score="87"] { border-color: #dc3545; }
        .gauge[data-risk-score="88"] { border-color: #dc3545; }
        .gauge[data-risk-score="89"] { border-color: #dc3545; }
        .gauge[data-risk-score="90"] { border-color: #dc3545; }
        .gauge[data-risk-score="91"] { border-color: #dc3545; }
        .gauge[data-risk-score="92"] { border-color: #dc3545; }
        .gauge[data-risk-score="93"] { border-color: #dc3545; }
        .gauge[data-risk-score="94"] { border-color: #dc3545; }
        .gauge[data-risk-score="95"] { border-color: #dc3545; }
        .gauge[data-risk-score="96"] { border-color: #dc3545; }
        .gauge[data-risk-score="97"] { border-color: #dc3545; }
        .gauge[data-risk-score="98"] { border-color: #dc3545; }
        .gauge[data-risk-score="99"] { border-color: #dc3545; }
        .gauge[data-risk-score="100"] { border-color: #dc3545; }
    </style>
}

@section Scripts {
    @if (Model.GeoLocation != null && Model.GeoLocation.Latitude != 0 && Model.GeoLocation.Longitude != 0)
    {
        <script type="text/javascript">
            function initMap() {
                var myLatLng = {
                    lat: @Model.GeoLocation.Latitude,
                    lng: @Model.GeoLocation.Longitude
                };

                var map = new google.maps.Map(document.getElementById('map'), {
                    zoom: 4,
                    center: myLatLng
                });

                new google.maps.Marker({
                    position: myLatLng,
                    map: map,
                    title: 'IP Location'
                });
            }
        </script>
        <script async defer src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBTtnBCPGgfMxfohkzdaSsJEzC_y40bcpY&signed_in=false&callback=initMap"></script>
    }
}

@inject IAuthorizationService AuthorizationService
@using Microsoft.AspNetCore.Authorization
@using XtremeIdiots.Portal.AdminWebApp.Auth.Constants
@using XtremeIdiots.Portal.AdminWebApp.Extensions
@using XtremeIdiots.Portal.AdminWebApp.Models
@using XtremeIdiots.Portal.AdminWebApp.ViewModels
@using XtremeIdiots.Portal.RepositoryApi.Abstractions.Constants
@using XtremeIdiots.Portal.RepositoryApi.Abstractions.Models
@model PlayerDetailsViewModel

@{
    ViewData["Title"] = (Model?.Player?.Username ?? "Unknown Player") + " Player Details";
}

<div class="wrapper wrapper-content animated fadeInRight">

@if (Model?.Player != null)
{
    var player = Model.Player;
<!-- Player Banner -->
<div class="row">
    <div class="col-12">
        <div class="ibox">
            <div class="ibox-content">
                <div class="row">
                    <div class="col-12">                        
                        <div class="d-flex flex-column flex-md-row align-items-start align-items-md-center">                            
                            <div class="mr-0 mr-md-3 mb-2 mb-md-0 text-center text-md-left">                                
                                @Html.GameTypeIcon(player.GameType)
                            </div>
                            <div class="flex-grow-1">
                                <h2 class="mb-2 text-center text-md-left">@(player.Username ?? "Unknown Player")</h2>                                
                                <div class="text-muted mb-3">
                                    <div class="row">
                                        <div class="col-12 col-lg-6 mb-2 mb-lg-0">
                                            <span class="d-flex align-items-center justify-content-center justify-content-md-start">
                                                <i class="fa fa-id-card mr-1"></i> Player ID: 
                                                <span id="playerId" class="mx-1 font-weight-bold">@player.PlayerId.ToString()</span>
                                                <i class="fa fa-copy cursor-pointer" onclick="copyToClipboard('playerId')" title="Copy Player ID"></i>
                                            </span>
                                            <span class="d-flex align-items-center justify-content-center justify-content-md-start">
                                                <i class="fa fa-key mr-1"></i> GUID: 
                                                <span id="playerGuid" class="mx-1 font-weight-bold text-truncate"> @Html.GuidLink(player.Guid, player.GameType.ToString())</span>
                                                <i class="fa fa-copy cursor-pointer" onclick="copyToClipboard('playerGuid')" title="Copy GUID"></i>
                                            </span>
                                        </div>

                                        <div class="col-12 col-lg-6 mb-2 mb-lg-0">
                                            <div class="btn-toolbar justify-content-center justify-content-md-start" role="toolbar">
                                                <div class="btn-group flex-wrap" role="group">
                                                @if ((await AuthorizationService.AuthorizeAsync(User, new Tuple<GameType, AdminActionType>(player.GameType, AdminActionType.Observation), AuthPolicies.CreateAdminAction)).Succeeded)
                                                {
                                                    <a asp-controller="AdminAction" asp-action="Create" asp-route-id="@player.PlayerId" asp-route-adminActionType="Observation" class="btn btn-outline-primary btn-sm">
                                                        <i class="fa fa-eye"></i> Observation
                                                    </a>
                                                }

                                                @if ((await AuthorizationService.AuthorizeAsync(User,new Tuple<GameType, AdminActionType>(player.GameType, AdminActionType.Warning), AuthPolicies.CreateAdminAction)).Succeeded)
                                                {
                                                    <a asp-controller="AdminAction" asp-action="Create" asp-route-id="@player.PlayerId" asp-route-adminActionType="Warning" class="btn btn-outline-warning btn-sm">
                                                        <i class="fa fa-exclamation-triangle"></i> Warning
                                                    </a>
                                                }

                                                @if ((await AuthorizationService.AuthorizeAsync(User, new Tuple<GameType, AdminActionType>(player.GameType, AdminActionType.Kick), AuthPolicies.CreateAdminAction)).Succeeded)
                                                {
                                                    <a asp-controller="AdminAction" asp-action="Create" asp-route-id="@player.PlayerId" asp-route-adminActionType="Kick" class="btn btn-outline-info btn-sm">
                                                        <i class="fa fa-sign-out"></i> Kick
                                                    </a>
                                                }

                                                @if ((await AuthorizationService.AuthorizeAsync(User, new Tuple<GameType, AdminActionType>(player.GameType, AdminActionType.TempBan), AuthPolicies.CreateAdminAction)).Succeeded)
                                                {
                                                    <a asp-controller="AdminAction" asp-action="Create" asp-route-id="@player.PlayerId" asp-route-adminActionType="TempBan" class="btn btn-outline-secondary btn-sm">
                                                        <i class="fa fa-clock-o"></i> Temp Ban
                                                    </a>
                                                }

                                                @if ((await AuthorizationService.AuthorizeAsync(User, new Tuple<GameType, AdminActionType>(player.GameType, AdminActionType.Ban), AuthPolicies.CreateAdminAction)).Succeeded)
                                                {
                                                    <a asp-controller="AdminAction" asp-action="Create" asp-route-id="@player.PlayerId" asp-route-adminActionType="Ban" class="btn btn-outline-danger btn-sm">
                                                        <i class="fa fa-ban"></i> Ban
                                                    </a>
                                                }

                                                <a asp-controller="Players" asp-action="AddProtectedName" asp-route-id="@player.PlayerId" class="btn btn-outline-success btn-sm">
                                                    <i class="fa fa-shield"></i> Protected Name
                                                </a>
                                                @if ((await AuthorizationService.AuthorizeAsync(User, AuthPolicies.CreatePlayerTag)).Succeeded)
                                                {
                                                    <a asp-controller="Players" asp-action="AddPlayerTag" asp-route-id="@player.PlayerId" class="btn btn-outline-dark btn-sm">
                                                        <i class="fa fa-tag"></i> Tag
                                                    </a>
                                                }
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>                        
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="row">

    <div class="col-12 col-lg-4 mb-4 mb-lg-0">
        <div class="ibox">
            <div class="ibox-content">

                <div id="player" class="tab-pane active">                    
                    <div>                        
                        <ul class="list-group clear-list">
                            <li class="list-group-item">
                                <span class="float-right text-right"> @player.Username</span>
                                Alias
                            </li>                            
                            @if (Model.GeoLocation != null)
                            {                                  
                                <li class="list-group-item">                                    
                                    <span class="float-right text-right ip-address-container" 
                                          data-ip="@player.IpAddress" 
                                          data-risk="@player.ProxyCheckRiskScore()" 
                                          data-is-proxy="@player.IsProxy().ToString().ToLower()" 
                                          data-is-vpn="@player.IsVpn().ToString().ToLower()"
                                          data-type="@player.ProxyType()"
                                          data-country-code="@(Model.GeoLocation.CountryCode ?? "")">                                        @player.IpAddress.FormatIPAddress(
                                            Model.GeoLocation,
                                            player.ProxyCheckRiskScore(),
                                            player.IsProxy(),
                                            player.IsVpn(),
                                            player.ProxyType())
                                    </span>
                                    IP Address
                                </li>
                                <li class="list-group-item">
                                    <span class="float-right text-right"> @Model.GeoLocation.LocationSummary()</span>
                                    Country/City
                                </li>
                            }        
                            <li class="list-group-item">
                                <span class="float-right text-right">
                                    <i class="fa fa-clock-o"></i> @Html.ToUserTime(User, player.FirstSeen)
                                </span>
                                First Seen
                            </li>                    
                            <li class="list-group-item">
                                <span class="float-right text-right">
                                    <i class="fa fa-clock-o"></i> @Html.ToUserTime(User, player.LastSeen)
                                </span>
                                Last Seen
                            </li>
                        </ul>

                    </div>
                </div>

            </div>
        </div>
       
        <div class="ibox">
            <div class="ibox-title">
                <h5>Player Location</h5>
            </div>
            <div class="ibox-content">
                <div id="map" style="height: 300px; width: 100%;"></div>
                <div class="text-right mt-2">
                    <small><a target="_blank" href="https://www.geo-location.net/">Powered by geo-location.net</a></small>
                </div>
            </div>
        </div>

    </div>

    <div class="col-12 col-lg-8 mb-8 mb-lg-0">
        <div class="ibox ">
            <div class="ibox-content">

                <ul class="nav nav-tabs nav-tabs-responsive">
                    <li class="nav-item">
                        <a class="nav-link active" data-toggle="tab" href="#aliases">Aliases</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" data-toggle="tab" href="#ipAddresses">IP Addresses</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" data-toggle="tab" href="#protectedNames">Protected Names</a>
                    </li>                    
                    <li class="nav-item">
                        <a class="nav-link" data-toggle="tab" href="#playerTags">Tags</a>
                    </li>                    
                    @if (!string.IsNullOrWhiteSpace(player.IpAddress))
                    {
                        <li class="nav-item">
                            <a class="nav-link" data-toggle="tab" href="#relatedPlayers">Related Players</a>
                        </li>
                    }
                    <li class="nav-item">
                        <a class="nav-link" data-toggle="tab" href="#chatLog">ChatLog</a>
                    </li>
                </ul>

                <div class="tab-content">
                    <div class="ibox-content tab-pane container active" style="height: 100%" id="aliases">
                        <div class="table-responsive">
                            <table class="table table-borderless" style="width: 100%;">
                                <thead>
                                    <tr>
                                        <th>
                                            Name
                                        </th>
                                        <th>
                                            Added
                                        </th>
                                        <th>
                                            Last Used
                                        </th>
                                        <th data-toggle="tooltip" data-placement="bottom" title="Confidence is determined by the amount of times that the Alias has been linked to the GUID">
                                            Confidence
                                        </th>
                                    </tr>
                                </thead>                            
                                <tbody>
                                    @if (player.PlayerAliases != null)
                                    {
                                        @foreach(var aliasDto in player.PlayerAliases)
                                        {
                                        <tr>
                                            <td>@aliasDto.Name</td>
                                            <td>@Html.ToUserTime(User, aliasDto.Added)</td>
                                            <td>@Html.ToUserTime(User, aliasDto.LastUsed)</td>
                                            <td>@Html.ToConfidenceLabel(aliasDto.ConfidenceScore, aliasDto.LastUsed)</td>
                                        </tr> 
                                        }
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                    
                    <div class="ibox-content tab-pane container fade" style="height: 100%" id="ipAddresses">
                        <div class="table-responsive">
                            <table class="table table-borderless" style="width: 100%;">
                                <thead>
                                    <tr>
                                        <th>
                                            Address
                                        </th>
                                        <th>
                                            Added
                                        </th>
                                        <th>
                                            Last Used
                                        </th>
                                        <th data-toggle="tooltip" data-placement="bottom" title="Confidence is determined by the amount of times that the IP Address has been linked to the GUID">
                                            Confidence
                                        </th>
                                    </tr>
                                </thead>                            
                                <tbody>
                                    @if (Model.EnrichedIpAddresses != null)
                                    {
                                        @foreach(var ipAddress in Model.EnrichedIpAddresses)
                                        {                                
                                        <tr>                                        
                                            <td class="ip-address-container" 
                                              data-ip="@ipAddress.Address" 
                                              data-risk="@ipAddress.RiskScore" 
                                              data-is-proxy="@ipAddress.IsProxy.ToString().ToLower()" 
                                              data-is-vpn="@ipAddress.IsVpn.ToString().ToLower()"
                                              data-type="@(ipAddress.ProxyCheck?.Type ?? "")"
                                              data-country-code="@(ipAddress.GeoLocation?.CountryCode ?? "unknown")">
                                                <!-- This initial rendering will be replaced by JavaScript -->
                                                <img src="/images/flags/@(ipAddress.GeoLocation != null && !string.IsNullOrEmpty(ipAddress.GeoLocation.CountryCode) ? ipAddress.GeoLocation.CountryCode.ToLower() : "unknown").png" /> @ipAddress.Address
                                            </td>
                                            <td>@Html.ToUserTime(User, ipAddress.IpAddressDto.Added)</td>
                                            <td>@Html.ToUserTime(User, ipAddress.IpAddressDto.LastUsed)</td>
                                            <td>@Html.ToConfidenceLabel(ipAddress.IpAddressDto.ConfidenceScore, ipAddress.IpAddressDto.LastUsed)</td>
                                        </tr> 
                                        }
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                    
                    <div class="ibox-content tab-pane container fade" style="height: 100%" id="protectedNames">
                        @if (player.ProtectedNames != null && player.ProtectedNames.Any())
                        {
                            <div class="table-responsive">
                                <table class="table table-borderless" style="width: 100%;">
                                    <thead>
                                        <tr>
                                            <th>Name</th>
                                            <th>Created</th>
                                            <th>Created By</th>
                                            <th>Actions</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var protectedName in player.ProtectedNames)
                                        {
                                            <tr>
                                                <td>@protectedName.Name</td>
                                                <td>@Html.ToUserTime(User, protectedName.CreatedOn)</td>
                                                <td>@protectedName.CreatedByUserProfile?.DisplayName</td>
                                                <td>
                                                    <div class="btn-group btn-group-sm d-flex flex-column flex-sm-row" role="group">
                                                        <a asp-controller="Players" asp-action="ProtectedNameReport" asp-route-id="@protectedName.ProtectedNameId" class="btn btn-info btn-sm mb-1 mb-sm-0">
                                                            <i class="fa fa-file-text"></i> <span class="d-none d-sm-inline">Usage Report</span>
                                                        </a>
                                                        <a asp-controller="Players" asp-action="DeleteProtectedName" asp-route-id="@protectedName.ProtectedNameId" class="btn btn-danger btn-sm"
                                                           onclick="return confirm('Are you sure you want to delete this protected name?');">
                                                            <i class="fa fa-trash"></i> <span class="d-none d-sm-inline">Delete</span>
                                                        </a>
                                                    </div>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                              <p>
                                <a asp-controller="Players" asp-action="AddProtectedName" asp-route-id="@player.PlayerId" class="btn btn-primary">
                                    <i class="fa fa-plus"></i> Add Another Protected Name
                                </a>
                            </p>
                        }
                        else
                        {
                            <div class="alert alert-info">
                                This player has no protected names.
                            </div>
                              <p>
                                <a asp-controller="Players" asp-action="AddProtectedName" asp-route-id="@player.PlayerId" class="btn btn-primary">
                                    <i class="fa fa-plus"></i> Add Protected Name
                                </a>
                            </p>                        }
                    </div>
                    <div class="ibox-content tab-pane container fade" style="height: 100%" id="playerTags">
                        @await Component.InvokeAsync("PlayerTags", new { playerId = player.PlayerId })
                    </div>
                    
                    @if (!string.IsNullOrWhiteSpace(Model.Player?.IpAddress))
                    {
                        <div class="ibox-content tab-pane container fade" style="height: 100%" id="relatedPlayers">
                            <div class="table-responsive">
                                <table class="table table-borderless" style="width: 100%;">
                                    <thead>
                                        <tr>
                                            <th>
                                                Player Name
                                            </th>
                                            <th>
                                                Connected By IP
                                            </th>
                                        </tr>
                                    </thead>                                
                                    <tbody>
                                        @if (player.RelatedPlayers != null)
                                        {
                                            @foreach(var relatedPlayerDto in player.RelatedPlayers)
                                            {
                                            <tr>
                                                <td>@Html.GameTypeIcon(relatedPlayerDto.GameType) @Html.ActionLink(relatedPlayerDto.Username, "Details", "Players", new {id = relatedPlayerDto.PlayerId})</td>
                                                <td>@relatedPlayerDto.IpAddress</td>
                                            </tr> 
                                            }
                                        }
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    }

                    <div class="ibox-content tab-pane container fade" style="height: 100%" id="chatLog">
                        <table id="chatLogTable" style="width: 100%;">
                            <thead>
                            <tr>
                                <th>
                                    Timestamp
                                </th>
                                <th>
                                    Username
                                </th>
                                <th>
                                    Type
                                </th>
                                <th>
                                    Message
                                </th>
                                <th>
                                    Server
                                </th> 
                                <th>
                                    Link
                                </th>
                            </tr>
                            </thead>
                        </table>
                    </div>                
                </div>
            </div>
        </div>
    </div>

</div>

@await Component.InvokeAsync("AdminActions", new {adminActions = player.AdminActions, linkToPlayer = false, playerDto = player})
}

</div>

@* ReSharper disable once Razor.SectionNotResolved *@

@section Scripts {
    <script type="text/javascript">

        $(document).ready(function() {

            $(function () {
                $('[data-toggle="tooltip"]').tooltip()
            })            
            
            $('#chatLogTable').DataTable({
                processing: true,
                serverSide: true,
                searchDelay: 1000,
                stateSave: true,
                order: [[1, "desc"]],                
                ajax: {
                    url: '/ServerAdmin/GetPlayerChatLog/@(Model?.Player?.PlayerId.ToString() ?? Guid.Empty.ToString())',
                    dataSrc: 'data',
                    contentType: "application/json",
                    type: "POST",
                    "data": function(d) {
                        return JSON.stringify(d);
                    }
                },
                columns: [
                    {
                        data: 'timestamp',
                        name: 'timestamp',
                        sortable: true
                    },
                    {
                        data: 'username',
                        name: 'username',
                        sortable: false,
                        render: function(data, type, row) {
                            return renderPlayerName(row['player']['gameType'], row['username'], row['playerId']);
                        }
                    },
                    {
                        data: 'chatType',
                        name: 'chatType',
                        sortable: false
                    },
                    {
                        data: 'message',
                        name: 'message',
                        sortable: false
                    },
                    {
                        data: 'serverName',
                        name: 'serverName',
                        sortable: false,
                        render: function(data, type, row) {
                            return row['gameServer']['liveTitle'];
                        }   
                    },
                    {
                        data: 'chatMessageId',
                        name: 'chatMessageId',
                        sortable: false,
                        render: function(data, type, row) {
                            return chatLogUrl(row['chatMessageId']);
                        }
                    }
                ]
            });

        });        
        
        // Initialize Google Map with player location
        function initMap() {
            @if (Model?.GeoLocation != null)
            {
                <text>
                    var myLatLng = {
                        lat: @Model.GeoLocation.Latitude,
                        lng: @Model.GeoLocation.Longitude
                    };

                    var map = new google.maps.Map(document.getElementById('map'),
                        {
                            zoom: 4,
                            center: myLatLng
                        });

                    new google.maps.Marker({
                        position: myLatLng,
                        map: map,
                        title: 'Player Location'
                    });
                </text>
            }
        }

    </script>

    <script async defer src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBTtnBCPGgfMxfohkzdaSsJEzC_y40bcpY&signed_in=false&callback=initMap"></script>
    <script>
        // Copy to clipboard functionality
        function copyToClipboard(elementId) {
            var element = document.getElementById(elementId);
            var text = element.textContent || element.innerText;
            
            if (navigator.clipboard && window.isSecureContext) {
                // Use modern clipboard API
                navigator.clipboard.writeText(text).then(function() {
                    showCopyFeedback(elementId);
                }, function(err) {
                    console.error('Could not copy text: ', err);
                });
            } else {
                // Fallback for older browsers
                var textArea = document.createElement("textarea");
                textArea.value = text;
                textArea.style.position = "fixed";
                textArea.style.left = "-999999px";
                textArea.style.top = "-999999px";
                document.body.appendChild(textArea);
                textArea.focus();
                textArea.select();
                
                try {
                    document.execCommand('copy');
                    showCopyFeedback(elementId);
                } catch (err) {
                    console.error('Could not copy text: ', err);
                }
                
                document.body.removeChild(textArea);
            }
        }
        
        function showCopyFeedback(elementId) {
            var icon = document.querySelector('#' + elementId + ' + .fa-copy');
            if (icon) {
                var originalClass = icon.className;
                icon.className = 'fa fa-check ml-1 cursor-pointer text-success';
                setTimeout(function() {
                    icon.className = originalClass;
                }, 2000);
            }
        }

        $(document).ready(function () {
            // Format all IP addresses with ProxyCheck information
            $('.ip-address-container').each(function() {
                var container = $(this);
                var ip = container.data('ip');
                var risk = container.data('risk') || 0;
                var isProxy = container.data('is-proxy') === 'true';
                var isVpn = container.data('is-vpn') === 'true';
                var type = container.data('type') || '';
                var countryCode = container.data('country-code') || '';
                
                // If we don't have a country code but have an IP address,
                // just display with the unknown flag for now
                container.html(formatIPAddress(ip, risk, isProxy, isVpn, type, countryCode));
            });
        });
    </script>
}
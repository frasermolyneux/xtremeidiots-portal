@inject IAuthorizationService AuthorizationService
@using Microsoft.AspNetCore.Authorization
@using XtremeIdiots.Portal.AdminWebApp.Auth.Constants
@using XtremeIdiots.Portal.RepositoryApi.Abstractions.Constants
@using XtremeIdiots.Portal.RepositoryApi.Abstractions.Models.AdminActions
@using XtremeIdiots.Portal.RepositoryApi.Abstractions.Models.Players
@model List<AdminActionDto>

@foreach (var item in Model)
{
    <div class="row">
        <div class="col-lg-12">
            <div class="ibox float-e-margins">
                <div class="ibox-content">
                    <h2>
                        @if ((bool) ViewData["LinkToPlayer"])
                        {
                            <text> @item.Type Record for <a asp-controller="Players" asp-action="Details" asp-route-id="@item.PlayerId">@item.PlayerDto?.Username</a></text>
                        }
                        else
                        {
                            <text> @item.Type Record</text>
                        }
                    </h2>
                    <p>
                        @if (item.UserProfileDto == null)
                        {
                            <text><strong>Created By:</strong> System</text>
                        }
                        else
                        {
                            <text><strong>Created By:</strong> </text>
                            @item.UserProfileDto.DisplayName
                        }

                        <br/>
                        <strong>Created:</strong> @item.Created

                        @if (item.Type == AdminActionType.TempBan && item.Expires > DateTime.UtcNow)
                        {
                            <br/>
                            <text><strong>Expires:</strong> @item.Expires</text>
                        }
                        else if (item.Type == AdminActionType.TempBan)
                        {
                            <br/>
                            <text><strong>Expired:</strong> @item.Expires</text>
                        }

                        @if (item.Type == AdminActionType.Ban && item.Expires != null)
                        {
                            <br/>
                            <text><strong>Ban Lifted:</strong> @item.Expires</text>
                        }

                        @if (item.ForumTopicId != 0)
                        {
                            <br/>
                            <strong>Discussion Topic: </strong>
                            <a href="https://www.xtremeidiots.com/forums/topic/@item.ForumTopicId-topic/" target="_blank">Link</a>
                        }
                    </p>

                    @{
                        string style;
                        switch (item.Type)
                        {
                            case AdminActionType.Observation:
                                style = "info";
                                break;
                            case AdminActionType.Warning:
                                style = "info";
                                break;
                            case AdminActionType.Kick:
                                style = "warning";
                                break;
                            case AdminActionType.TempBan:
                                style = item.Expires < DateTime.UtcNow ? "dark" : "danger";
                                break;
                            case AdminActionType.Ban:
                                style = item.Expires != null ? "dark" : "danger";
                                break;
                            default:
                                style = "info";
                                break;
                        }
                    }

                    @* ReSharper disable once UnknownCssClass *@
                    <div class="alert alert-@style">
                        @Html.Raw(item.Text)
                    </div>

                    <p>
                        @if ((await AuthorizationService.AuthorizeAsync(User, new Tuple<GameType, AdminActionType, string>(item.PlayerDto != null ? item.PlayerDto.GameType : ((PlayerDto)ViewData["Player"]).GameType, item.Type, item.UserProfileDto?.XtremeIdiotsForumId), AuthPolicies.EditAdminAction)).Succeeded)
                        {
                            <a asp-controller="AdminAction" asp-action="Edit" asp-route-id="@item.AdminActionId" class="btn btn-sm btn-primary"><span class="fa fa-edit"></span> Edit @item.Type</a>
                        }

                        @if (item.Type == AdminActionType.Ban && item.Expires == null || item.Type == AdminActionType.TempBan && item.Expires > DateTime.UtcNow)
                        {
                            @if ((await AuthorizationService.AuthorizeAsync(User, new Tuple<GameType, string>(item.PlayerDto != null ? item.PlayerDto.GameType : ((PlayerDto)ViewData["Player"]).GameType, item.UserProfileDto?.XtremeIdiotsForumId), AuthPolicies.LiftAdminAction)).Succeeded)
                            {
                                <a asp-controller="AdminAction" asp-action="Lift" asp-route-id="@item.AdminActionId" class="btn btn-sm btn-primary"><span class="fa fa-trash"></span> Lift Ban</a>
                            }
                        }

                        @if (item.Type == AdminActionType.Ban && item.UserProfileDto == null)
                        {
                            @if ((await AuthorizationService.AuthorizeAsync(User, item.PlayerDto != null ? item.PlayerDto.GameType : ((PlayerDto)ViewData["Player"]).GameType, AuthPolicies.ClaimAdminAction)).Succeeded)
                            {
                                <a asp-controller="AdminAction" asp-action="Claim" asp-route-id="@item.AdminActionId" class="btn btn-sm btn-primary"><span class="fa fa-edit"></span> Claim Ban</a>
                            }
                        }

                        @if (item.ForumTopicId == 0)
                        {
                            @if ((await AuthorizationService.AuthorizeAsync(User, item.PlayerDto != null ? item.PlayerDto.GameType : ((PlayerDto)ViewData["Player"]).GameType, AuthPolicies.CreateAdminActionTopic)).Succeeded)
                            {
                                <a asp-controller="AdminAction" asp-action="CreateDiscussionTopic" asp-route-id="@item.AdminActionId" class="btn btn-sm btn-primary"><span class="fa fa-edit"></span> Create Discussion Topic</a>
                            }
                        }

                        @if ((await AuthorizationService.AuthorizeAsync(User, AuthPolicies.DeleteAdminAction)).Succeeded)
                        {
                            <a asp-controller="AdminAction" asp-action="Delete" asp-route-id="@item.AdminActionId" class="btn btn-sm btn-danger"><span class="fa fa-trash"></span> Delete @item.Type</a>
                        }
                    </p>
                </div>
            </div>
        </div>
    </div>
}